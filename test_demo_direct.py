"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç demo –∞–∫–∫–∞—É–Ω—Ç–∞ Bybit —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

from backend.integrations.bybit_client import BybitClient

async def test_demo_direct():
    """–ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ demo –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
    print("=== –ü–†–Ø–ú–û–ô –¢–ï–°–¢ DEMO –ê–ö–ö–ê–£–ù–¢–ê BYBIT ===\n")
    
    # –ü—Ä—è–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è demo —Ä–µ–∂–∏–º–∞
    api_key = "17OnwXNKgOcgnfbB4e"
    api_secret = "5ra0Ec0UIldYid2mOVz1APW0uTMJwZqglB1o"
    
    print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    print(f"  API Key: {api_key[:10]}...")
    print(f"  Testnet: False (demo —Ä–µ–∂–∏–º)")
    print(f"  Demo: True (—Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã)")
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å demo –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (testnet=False, demo=True)
        client = BybitClient(
            api_key=api_key,
            api_secret=api_secret,
            testnet=False,  # –í–ê–ñ–ù–û: –¥–ª—è demo —Ä–µ–∂–∏–º–∞ testnet=False
            demo=True,      # –í–∫–ª—é—á–∞–µ–º demo —Ä–µ–∂–∏–º
            ignore_ssl=True
        )
        
        print("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è demo –∫–ª–∏–µ–Ω—Ç–∞...")
        success = await client.initialize()
        
        if success:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ demo –∞–∫–∫–∞—É–Ω—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ —É—Å–ø–µ—à–Ω–æ!")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
            print("\n‚è∞ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
            server_time = await client.get_server_time()
            print(f"–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
            print("\nüìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            klines = client.get_kline("BTCUSDT", "5", limit=5)
            if klines is not None and not klines.empty:
                last_price = klines['close'].iloc[-1]
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–≤–µ—á–µ–π: {len(klines)}")
                print(f"üéØ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${last_price:,.2f}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –¥–ª—è 2025 –≥–æ–¥–∞
                if last_price > 100000:
                    print("‚úÖ –¶–µ–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–º—É —Ä—ã–Ω–∫—É 2025 –≥–æ–¥–∞!")
                else:
                    print("‚ö†Ô∏è –¶–µ–Ω–∞ –∫–∞–∂–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π, –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ testnet")
            else:
                print("‚ùå –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ demo –∞–∫–∫–∞—É–Ω—Ç–∞
            print("\nüí∞ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ demo –∞–∫–∫–∞—É–Ω—Ç–∞...")
            balance = client.get_wallet_balance()
            if balance:
                print("üí∞ –ë–∞–ª–∞–Ω—Å demo –∞–∫–∫–∞—É–Ω—Ç–∞:")
                for coin, info in balance.items():
                    if info['total'] > 0:
                        print(f"  {coin}: {info['total']:,.2f} (–¥–æ—Å—Ç—É–ø–Ω–æ: {info['available']:,.2f})")
            else:
                print("‚ÑπÔ∏è –ë–∞–ª–∞–Ω—Å demo –∞–∫–∫–∞—É–Ω—Ç–∞ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            print("\nüìà –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π demo –∞–∫–∫–∞—É–Ω—Ç–∞...")
            positions = client.get_positions()
            if positions:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
                for pos in positions:
                    print(f"  {pos['symbol']}: {pos['side']} {pos['size']} (PnL: {pos['unrealized_pnl']:.2f})")
            else:
                print("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ demo –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç")
                
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ demo –∞–∫–∫–∞—É–Ω—Ç—É")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_demo_direct()) 
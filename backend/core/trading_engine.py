"""
Trading Engine - Main trading logic for Bybit Trading Bot
Orchestrates signal processing, risk management, and order execution
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime
import pandas as pd
import math
from decimal import Decimal, ROUND_DOWN

from .signal_processor import SignalProcessor
from .risk_manager import RiskManager
from .strategy_manager import StrategyManager
from .trading_mode import TradingMode, get_mode_config
from ..integrations.bybit_client import BybitClient
from ..utils.config import settings, get_risk_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("backend.core.trading_engine")

class TradingEngine:
    """
    Main trading engine that coordinates all trading activities
    """
    
    def __init__(self, bybit_client: Optional[BybitClient] = None, signal_processor: Optional[SignalProcessor] = None, risk_manager: Optional[RiskManager] = None):
        self.signal_processor = signal_processor or SignalProcessor()
        self.risk_manager = risk_manager or RiskManager()
        self.strategy_manager = StrategyManager(self.signal_processor)
        self.bybit_client = bybit_client
        
        # Trading state
        self.is_running = False
        self.start_time = None
        self.active_positions = {}
        self.trading_pairs = settings.trading_pairs
        
        # Performance tracking
        self.total_trades = 0
        self.winning_trades = 0
        self.total_pnl = 0.0
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ª–æ—Ç–∞ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
        self.LOT_PRECISION = {
            "BTCUSDT": 3,
            "ETHUSDT": 3,
            "SOLUSDT": 2,
            "DOGEUSDT": 0,
            "XRPUSDT": 0,
            "BNBUSDT": 2,
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        
        # –¢–∞–±–ª–∏—Ü–∞ —à–∞–≥–∞ –ª–æ—Ç–∞ (lot size) –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
        self.LOT_SIZE = {
            "BTCUSDT": 0.001,
            "ETHUSDT": 0.001,
            "SOLUSDT": 0.01,
            "DOGEUSDT": 1,
            "XRPUSDT": 1,
            "BNBUSDT": 0.01,
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        
    async def initialize(self):
        """Initialize the trading engine"""
        try:
            logger.info("üîß Initializing Trading Engine...")
            
            # Initialize Bybit client
            self.bybit_client = BybitClient(
                api_key=settings.bybit_api_key,
                api_secret=settings.bybit_api_secret,
                testnet=settings.bybit_testnet
            )
            
            success = await self.bybit_client.initialize()
            if not success:
                raise Exception("Failed to initialize Bybit client")
            
            # Initialize risk manager
            await self.risk_manager.initialize()
            
            logger.info("‚úÖ Trading Engine initialized successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error initializing Trading Engine: {e}")
            return False
    
    async def start(self):
        """Start the trading engine"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è Trading engine is already running")
            return
        
        self.is_running = True
        self.start_time = datetime.now()
        logger.info("üöÄ Trading engine started")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._main_trading_loop())
    
    def stop(self):
        """Stop the trading engine"""
        logger.info("üõë Stopping trading engine...")
        self.is_running = False
        self.start_time = None
    
    async def _main_trading_loop(self):
        """Main trading loop that processes signals and executes trades"""
        current_mode = self.strategy_manager.get_current_mode()
        mode_config = self.strategy_manager.get_mode_parameters(current_mode)
        timeframe = mode_config.get('timeframes', ['5m'])[0] if mode_config and 'timeframes' in mode_config and mode_config['timeframes'] else "5m"
        trading_pairs = mode_config.get('trading_pairs', self.trading_pairs) if mode_config and 'trading_pairs' in mode_config else self.trading_pairs
        logger.info(f"üìä Trading loop started - Mode: {current_mode.value}, Timeframe: {timeframe}")
        logger.info(f"üìä Trading pairs: {trading_pairs}")
        while self.is_running:
            try:
                logger.info(f"üîÑ [LOOP] Current trading pairs: {trading_pairs}")
                for symbol in trading_pairs:
                    bybit_symbol = symbol.replace("/", "")
                    await self._process_symbol(bybit_symbol, timeframe)
                wait_time = 15 if current_mode.value == "aggressive" else 30
                await asyncio.sleep(wait_time)
            except Exception as e:
                logger.error(f"‚ùå Error in trading loop iteration: {e}")
                await asyncio.sleep(60)
    
    async def _process_symbol(self, symbol: str, timeframe: str):
        """Process trading signals for a specific symbol"""
        try:
            # Get market data
            market_data = self.bybit_client.get_kline(
                symbol=symbol,
                interval=timeframe,
                limit=200
            )
            
            if market_data is None or len(market_data) < 50:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return
            
            # Process technical signals
            signals = self.signal_processor.get_signals(symbol, timeframe)
            signal_strength = self.signal_processor.get_signal_strength(signals)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –ª–æ–≥ –¥–ª—è –≤–µ–±–∞
            web_log = self.format_signal_log_for_web(symbol, signals, signal_strength)
            from backend.main import manager
            import asyncio
            if len(manager.active_connections) > 0:
                try:
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        asyncio.create_task(manager.broadcast(f'{web_log}'))
                except Exception:
                    pass

            # –°—Ç–∞—Ä—ã–π –ª–æ–≥ –¥–ª—è backend
            logger.info(f"{symbol}: Buy: {signal_strength['BUY']}, Sell: {signal_strength['SELL']}, Hold: {signal_strength['HOLD']}")

            # Check if we should trade
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
            current_mode = self.strategy_manager.get_current_mode()
            
            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ç—Ä–µ–±—É–µ—Ç –º–µ–Ω—å—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
            if current_mode.value == "aggressive":
                min_confirmation = 3  # –î–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –Ω—É–∂–Ω–æ –±—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
            elif current_mode.value == "medium":
                min_confirmation = 4  # –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Å–∫–æ—Ä–æ—Å—Ç—å—é –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å—é
            else:  # conservative
                min_confirmation = 6  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ - –±–æ–ª—å—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            
            trading_decision = self.signal_processor.should_trade(
                signals, 
                min_confirmation=min_confirmation
            )
            
            if trading_decision:
                await self._execute_trade(symbol, trading_decision, market_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")

    def format_signal_log_for_web(self, symbol: str, signals: dict, signal_strength: dict) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–µ–±-–ª–æ–≥–æ–≤: —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –ø–æ—Ç–æ–º –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        buy = []
        sell = []
        hold = []
        for ind, sig in signals.items():
            if sig == "BUY":
                buy.append(ind)
            elif sig == "SELL":
                sell.append(ind)
            else:
                hold.append(ind)
        parts = []
        if buy:
            parts.append(f"Buy: {', '.join(buy)}")
        if sell:
            parts.append(f"Sell: {', '.join(sell)}")
        if hold:
            parts.append(f"Hold: {', '.join(hold)}")
        details = "; ".join(parts)
        summary = f"{symbol}: {signal_strength['BUY']} buy, {signal_strength['SELL']} sell, {signal_strength['HOLD']} hold"
        return f"{details}\n{summary}"
    
    def calc_tp_sl(self, entry_price, side, mode):
        logger.info(f"[TP/SL] entry_price={entry_price}, side={side}, mode={mode}")
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –µ—Å–ª–∏ —Ä–µ–∂–∏–º moderate, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ medium
        if mode == "moderate":
            logger.warning("[TP/SL] –†–µ–∂–∏–º 'moderate' –∑–∞–º–µ–Ω—ë–Ω –Ω–∞ 'medium'")
            mode = "medium"
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã TP/SL
        params = {
            'aggressive': {'sl': 0.02, 'tp': 0.03},    # 2% SL, 3% TP
            'medium':     {'sl': 0.015, 'tp': 0.025},  # 1.5% SL, 2.5% TP  
            'conservative': {'sl': 0.01, 'tp': 0.02}   # 1% SL, 2% TP
        }
        
        if mode not in params:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏: {mode}")
            return None, None
        
        sl_pct = params[mode]['sl']
        tp_pct = params[mode]['tp']
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç TP/SL —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if side.lower() in ['buy', 'long']:
            # –î–ª—è –ø–æ–∫—É–ø–∫–∏: SL –Ω–∏–∂–µ –≤—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω—ã, TP –≤—ã—à–µ
            stop_loss = entry_price * (1 - sl_pct)
            take_profit = entry_price * (1 + tp_pct)
        else:
            # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏: SL –≤—ã—à–µ –≤—Ö–æ–¥–Ω–æ–π —Ü–µ–Ω—ã, TP –Ω–∏–∂–µ
            stop_loss = entry_price * (1 + sl_pct)
            take_profit = entry_price * (1 - tp_pct)
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ü–µ–Ω
        if side.lower() in ['buy', 'long']:
            if stop_loss >= entry_price:
                logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SL –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {stop_loss} >= {entry_price}")
                return None, None
            if take_profit <= entry_price:
                logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TP –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {take_profit} <= {entry_price}")
                return None, None
        else:
            if stop_loss <= entry_price:
                logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SL –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {stop_loss} <= {entry_price}")
                return None, None
            if take_profit >= entry_price:
                logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TP –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {take_profit} >= {entry_price}")
                return None, None
        
        logger.info(f"[TP/SL] Calculated: SL={stop_loss:.4f}, TP={take_profit:.4f}")
        return round(stop_loss, 4), round(take_profit, 4)
    
    def round_qty(self, symbol, qty):
        precision = self.LOT_PRECISION.get(symbol, 3)
        if precision == 0:
            return int(qty)
        return round(qty, precision)

    def adjust_qty(self, symbol, qty):
        import math
        lot_size = self.LOT_SIZE.get(symbol, 0.01)
        qty = abs(qty)
        qty_adjusted = math.ceil(qty / lot_size) * lot_size
        if qty_adjusted < lot_size:
            qty_adjusted = lot_size
        if lot_size >= 1:
            qty_adjusted = int(qty_adjusted)
        return qty_adjusted

    def format_qty_for_bybit(self, symbol: str, qty: float, price: float = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç qty –¥–ª—è Bybit: –∫—Ä–∞—Ç–µ–Ω lot_size, –Ω–µ –º–µ–Ω—å—à–µ lot_size, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ LOT_PRECISION, —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏/—Ç–æ—á–∫—É, –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞.
        
        –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: qty –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å lot_size.
        """
        from decimal import Decimal, ROUND_DOWN
        lot_size = Decimal(str(self.LOT_SIZE.get(symbol, 0.01)))
        precision = self.LOT_PRECISION.get(symbol, 3)
        qty_orig = qty
        qty = Decimal(str(qty))
        logger.info(f"[format_qty_for_bybit] symbol={symbol}, qty_in={qty_orig}, lot_size={lot_size}, precision={precision}, price={price}")
        
        # qty –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ lot_size
        if qty < lot_size:
            logger.info(f"[format_qty_for_bybit] qty < lot_size: {qty} < {lot_size}, set to lot_size")
            qty = lot_size
        
        # qty –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫—Ä–∞—Ç–µ–Ω lot_size (–¥–æ precision –∑–Ω–∞–∫–æ–≤)
        if lot_size > 0:
            qty = (qty // lot_size) * lot_size
        
        logger.info(f"[format_qty_for_bybit] qty after lot_size rounding: {qty}")
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ—Ä–¥–µ—Ä–∞ (5 USDT)
        if price is not None and price > 0:
            min_qty = (Decimal('5') / Decimal(str(price))).quantize(lot_size, rounding=ROUND_DOWN)
            logger.info(f"[format_qty_for_bybit] min_qty for 5 USDT: {min_qty}")
            if qty < min_qty:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                qty = ((min_qty // lot_size) + 1) * lot_size
                logger.info(f"[format_qty_for_bybit] qty increased to meet 5 USDT minimum: {qty}")
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è ETHUSDT (–º–∏–Ω–∏–º—É–º 0.1)
        if symbol == "ETHUSDT" and qty < Decimal('0.1'):
            qty = Decimal('0.1')
            logger.info(f"[format_qty_for_bybit] ETHUSDT minimum qty set to 0.1")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ lot_size
        remainder = (qty / lot_size) % 1
        logger.info(f"[format_qty_for_bybit] qty/lot_size={qty/lot_size}, remainder={remainder}")
        if remainder != 0:
            logger.warning(f"[format_qty_for_bybit] WARNING: qty={qty} –Ω–µ –∫—Ä–∞—Ç–µ–Ω lot_size={lot_size} (remainder={remainder}) ‚Äî Bybit –Ω–µ –ø—Ä–∏–º–µ—Ç!")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        qty_str = f"{qty:.{precision}f}".rstrip('0').rstrip('.')
        logger.info(f"[format_qty_for_bybit] qty_str result: {qty_str}, qty*price={qty*Decimal(str(price or 1)):.5f}")
        return qty_str

    def get_mode(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Å—Ç—Ä–æ–∫–∞)"""
        if hasattr(self.risk_manager, 'mode'):
            return self.risk_manager.mode
        return 'medium'

    def set_mode(self, mode):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if hasattr(self.risk_manager, 'mode'):
            self.risk_manager.mode = mode
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    async def _execute_trade(self, symbol: str, decision: str, market_data: pd.DataFrame):
        """Execute a trade based on the signal"""
        try:
            await self.sync_positions_with_exchange()
            current_price = market_data['close'].iloc[-1]
            current_mode = self.strategy_manager.get_current_mode()
            mode_config = self.strategy_manager.get_mode_parameters(current_mode)
            if symbol in self.active_positions:
                logger.warning(f"‚ö†Ô∏è Already have position in {symbol}")
                return
            min_position_value = 100
            leverage = 1
            if 'leverage_range' in mode_config and isinstance(mode_config['leverage_range'], tuple):
                leverage = float(mode_config['leverage_range'][1])
            qty = min_position_value / (current_price * leverage)
            qty = max(qty, 0.001)
            min_qty = math.ceil(5 / float(current_price) * 1000) / 1000
            if qty * current_price < 5:
                logger.info(f"üîÑ [min_qty] Increasing qty for {symbol}: {qty} ‚Üí {min_qty} (to meet minimum order value >= 5 USDT)")
                qty = min_qty
            # –û–∫—Ä—É–≥–ª—è–µ–º qty –ø–æ —à–∞–≥—É –ª–æ—Ç–∞
            qty_final = self.adjust_qty(symbol, qty)
            # –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º qty –∫–∞–∫ —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
            if self.LOT_SIZE.get(symbol, 0.01) >= 1:
                qty_str = str(int(qty_final))
            else:
                precision = 3 if self.LOT_SIZE.get(symbol, 0.01) == 0.001 else 2
                qty_str = f"{qty_final:.{precision}f}"
            logger.info(f"üî¢ [lot_size] –ò—Ç–æ–≥–æ–≤–æ–µ qty –¥–ª—è {symbol}: {qty_str} (lot_size={self.LOT_SIZE.get(symbol, 1)})")
            side = "Buy" if decision == "BUY" else "Sell"
            # –î–ª—è market order –ø–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ç–∏–ø–æ–≤
            order_price = current_price if "market" else None
            order_result = await self.place_order(
                symbol=symbol,
                side=side,
                amount=qty_final,
                order_type="market",
                price=current_price
            )
            if order_result and order_result.get('success'):
                order_id = order_result.get('order_id', None)
                self.active_positions[symbol] = {
                    "order_id": order_id,
                    "side": side,
                    "size": order_result.get('amount', qty_final),
                    "entry_price": current_price,
                    "stop_loss": None,
                    "take_profit": None,
                    "timestamp": datetime.now(),
                    "mode": current_mode.value
                }
                self.total_trades += 1
                logger.info(f"‚úÖ Order placed successfully: {order_id}")
            else:
                error_msg = order_result.get('error', 'Unknown error') if order_result else 'No response'
                logger.error(f"‚ùå Failed to place order: {error_msg}")
            await self.sync_positions_with_exchange()
        except Exception as e:
            logger.error(f"‚ùå Error executing trade for {symbol}: {e}")
    
    def calc_tp_sl_from_mode(self, entry_price: float, side: str, mode_config) -> tuple:
        """Calculate TP/SL based on mode configuration"""
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: mode_config - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –Ω–µ –æ–±—ä–µ–∫—Ç
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã TP/SL –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            tp_range = mode_config.get('tp_range', {'min': 0.5, 'max': 1.0})
            sl_range = mode_config.get('sl_range', {'min': 0.3, 'max': 0.7})
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            tp_pct = tp_range['min'] / 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π TP –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            sl_pct = sl_range['min'] / 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π SL –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            
            if side.lower() in ['buy', 'long']:
                stop_loss = entry_price * (1 - sl_pct)
                take_profit = entry_price * (1 + tp_pct)
            else:
                stop_loss = entry_price * (1 + sl_pct)
                take_profit = entry_price * (1 - tp_pct)
                
            return round(stop_loss, 4), round(take_profit, 4)
            
        except Exception as e:
            logger.error(f"Error calculating TP/SL: {e}")
            return None, None
    
    async def place_order(self, symbol: str, side: str, amount: float, order_type: str = "market", price: float = None) -> Dict:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ("buy" –∏–ª–∏ "sell")
            amount: –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ ("market" –∏–ª–∏ "limit")
            price: –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        logger.info(f"üìù –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: {side.upper()} {amount} {symbol} ({order_type})")
        
        try:
            if not self.bybit_client:
                return {"success": False, "error": "Bybit client not initialized"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if side.lower() not in ['buy', 'sell']:
                return {"success": False, "error": f"Invalid side: {side}"}
            
            if amount <= 0:
                return {"success": False, "error": f"Invalid amount: {amount}"}
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            logger.info(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞:")
            logger.info(f"   –°–∏–º–≤–æ–ª: {symbol}")
            logger.info(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side.upper()}")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}")
            logger.info(f"   –¢–∏–ø: {order_type}")
            if price:
                logger.info(f"   –¶–µ–Ω–∞: {price}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ TP/SL –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º—ã
            current_price = price if price else self.bybit_client.get_current_price(symbol)
            if current_price is None:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}, –æ—Ä–¥–µ—Ä –Ω–µ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω!")
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—É–º–º—ã –æ—Ä–¥–µ—Ä–∞"}
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∂–∏–º–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–ª–µ—á–∞
            mode = self.risk_manager.mode if hasattr(self.risk_manager, 'mode') else 'medium'
            try:
                mode_enum = TradingMode(mode)
            except Exception:
                mode_enum = TradingMode.MEDIUM
            mode_config = get_mode_config(mode_enum)
            leverage = 1
            if hasattr(mode_config, 'leverage_range') and isinstance(mode_config.leverage_range, tuple):
                leverage = float(mode_config.leverage_range[1])
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –æ—Ä–¥–µ—Ä–∞ (Bybit —Ç—Ä–µ–±—É–µ—Ç >= 5 USDT –Ω–∞ –∑–∞—è–≤–∫—É)
            min_qty = math.ceil(5 / float(current_price) * 1000) / 1000
            if amount < min_qty:
                logger.info(f"üîÑ [min_qty] Increasing qty for {symbol}: {amount} ‚Üí {min_qty} (to meet minimum order value >= 5 USDT)")
                amount = min_qty
            min_order_value = float(amount) * float(current_price)
            if min_order_value < 5:
                logger.warning(f"‚ö†Ô∏è –°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ {min_order_value:.2f} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π 5 USDT (Bybit). –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                return {"success": False, "error": f"–°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ {min_order_value:.2f} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π 5 USDT (Bybit)"}
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
            order_value = float(amount) * float(current_price) * leverage
            if order_value < 100:
                logger.warning(f"‚ö†Ô∏è –°—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞ {order_value:.2f} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π 100 USDT. –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                return {"success": False, "error": f"–°—É–º–º–∞ –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞ {order_value:.2f} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π 100 USDT"}
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∂–∏ (–±–∞–ª–∞–Ω—Å–∞)
            margin_required = float(amount) * float(current_price) / leverage
            balance = self.bybit_client.get_balance()
            if balance is not None and margin_required > float(balance):
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Ä–∂–∞ {margin_required:.2f} USDT, –¥–æ—Å—Ç—É–ø–Ω–æ {balance:.2f} USDT. –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                return {"success": False, "error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Ä–∂–∞ {margin_required:.2f} USDT, –¥–æ—Å—Ç—É–ø–Ω–æ {balance:.2f} USDT"}
            mode = self.risk_manager.mode if hasattr(self.risk_manager, 'mode') else 'medium'
            stop_loss, take_profit = self.calc_tp_sl(current_price, side, mode)
            if stop_loss is None or take_profit is None:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å TP/SL –¥–ª—è {symbol}, –æ—Ä–¥–µ—Ä –Ω–µ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω!")
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å TP/SL"}
            # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –ø–æ–ø—ã—Ç–∫–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º qty –ø—Ä–∏ –æ—à–∏–±–∫–µ 110007 ---
            max_attempts = 3
            attempt = 0
            max_qty = 1000  # –ª–∏–º–∏—Ç –¥–ª—è qty, —á—Ç–æ–±—ã –Ω–µ —É–π—Ç–∏ –≤ –∞–±—Å—É—Ä–¥
            while attempt < max_attempts:
                logger.info(f"üéØ [–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}] Executing {side} order for {amount} {symbol} at {current_price}")
                qty_final = self.adjust_qty(symbol, amount)
                qty_str = self.format_qty_for_bybit(symbol, qty_final, price=current_price)
                lot_size = self.LOT_SIZE.get(symbol, 0.01)
                precision = self.LOT_PRECISION.get(symbol, 3)
                logger.info(f"üî¢ [lot_size] –ò—Ç–æ–≥–æ–≤–æ–µ qty –¥–ª—è {symbol}: {qty_str} (lot_size={lot_size}, precision={precision})")
                order_kwargs = dict(
                    symbol=symbol,
                    side=side.capitalize(),
                    order_type=order_type.capitalize(),
                    qty=qty_str,  # qty –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                    stop_loss=float(stop_loss) if stop_loss is not None else None,
                    take_profit=float(take_profit) if take_profit is not None else None
                )
                if order_type.lower() == "limit" and price is not None:
                    order_kwargs["price"] = float(price)
                order_kwargs = {k: v for k, v in order_kwargs.items() if v is not None}
                logger.info(f"[place_order] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è bybit_client.place_order: {order_kwargs}")
                logger.info(f"[place_order] type(qty_str)={type(qty_str)}, repr(qty_str)={repr(qty_str)}")
                logger.info(f"[place_order] –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {order_kwargs}")
                order_result = await self.bybit_client.place_order(**order_kwargs)
                logger.info(f"[place_order] –û—Ç–≤–µ—Ç bybit_client.place_order: {order_result}")
                if order_result and order_result.get('retCode') == 0:
                    order_id = order_result.get('result', {}).get('orderId')
                    logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω! ID: {order_id}")
                    self.total_trades += 1
                    await self.sync_positions_with_exchange()
                    return {
                        "success": True,
                        "order_id": order_id,
                        "symbol": symbol,
                        "side": side,
                        "amount": amount,
                        "type": order_type,
                        "result": order_result
                    }
                else:
                    error_msg = order_result.get('retMsg', 'Unknown error') if order_result else 'No response'
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {error_msg}")
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 110007 ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º qty –∏ –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
                    if order_result and ("110007" in str(order_result.get('retMsg', '')) or "ab not enough for new order" in str(order_result.get('retMsg', ''))):
                        new_amount = round(amount * 2, 3)
                        if new_amount > max_qty:
                            logger.error(f"‚ùå [110007] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç qty ({new_amount}), –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
                            return {"success": False, "error": f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç qty ({new_amount}), –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.", "result": order_result}
                        logger.warning(f"üîÑ [110007] –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º qty {amount} ‚Üí {new_amount} –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
                        amount = new_amount
                        attempt += 1
                        continue
                    # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    return {"success": False, "error": error_msg, "result": order_result}
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è qty. –ü–æ—Å–ª–µ–¥–Ω–µ–µ qty: {amount}")
            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è qty", "result": None}
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return {"success": False, "error": str(e)}

    async def get_trading_status(self) -> Dict:
        """Get current trading status"""
        return {
            "is_running": self.is_running,
            "start_time": self.start_time.isoformat() if self.start_time else None,
            "total_trades": self.total_trades,
            "winning_trades": self.winning_trades,
            "win_rate": (self.winning_trades / self.total_trades * 100) if self.total_trades > 0 else 0,
            "total_pnl": self.total_pnl,
            "active_positions": len(self.active_positions),
            "trading_pairs": self.trading_pairs
        }
    
    async def get_active_positions(self) -> Dict:
        """Get active trading positions"""
        return self.active_positions
    
    async def close_position(self, symbol: str) -> bool:
        """Close a specific position"""
        if symbol not in self.active_positions:
            logger.warning(f"‚ö†Ô∏è No active position for {symbol}")
            return False
        
        try:
            position = self.active_positions[symbol]
            
            # Determine opposite side for closing
            close_side = "Sell" if position["side"] == "Buy" else "Buy"
            
            # Place closing order
            lot_size = self.LOT_SIZE.get(symbol, 0.01)
            qty_final = self.adjust_qty(symbol, position["size"])
            qty_str = self.format_qty_for_bybit(symbol, qty_final)
            logger.info(f"üî¢ [lot_size] –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol}: qty={qty_str} (lot_size={lot_size})")
            order_kwargs = dict(
                symbol=symbol,
                side=close_side,
                order_type="Market",
                qty=qty_str
            )
            order_result = await self.bybit_client.place_order(**order_kwargs)
            
            if order_result:
                # Remove from active positions
                del self.active_positions[symbol]
                logger.info(f"‚úÖ Position closed for {symbol}")
                
                await self.sync_positions_with_exchange()  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏
                
                return True
            
        except Exception as e:
            logger.error(f"‚ùå Error closing position for {symbol}: {e}")
        
        return False
    
    async def shutdown(self):
        """Shutdown the trading engine gracefully"""
        logger.info("üîÑ Shutting down trading engine...")
        
        # Stop trading
        self.stop()
        
        # Close all positions
        for symbol in list(self.active_positions.keys()):
            await self.close_position(symbol)
        
        logger.info("‚úÖ Trading engine shutdown complete")

    async def sync_positions_with_exchange(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞ –±–∏—Ä–∂–µ"""
        if not self.bybit_client:
            logger.warning("‚ö†Ô∏è Bybit client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            return
        real_positions = self.bybit_client.get_positions() or []
        real_symbols = {p['symbol'] for p in real_positions if p['size'] > 0}
        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ
        for symbol in list(self.active_positions.keys()):
            if symbol not in real_symbols:
                del self.active_positions[symbol]
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞ –±–∏—Ä–∂–µ, –∞ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–µ—Ç
        for pos in real_positions:
            if pos['symbol'] not in self.active_positions and pos['size'] > 0:
                self.active_positions[pos['symbol']] = pos
"""
Market Analyzer for Bybit Trading Bot
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
"""

import pandas as pd
import numpy as np
from typing import Dict, List, Optional, Tuple
import logging
from datetime import datetime, timedelta
from enum import Enum

logger = logging.getLogger(__name__)


class MarketRegime(Enum):
    """–¢–∏–ø—ã —Ä—ã–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤"""
    TRENDING_UP = "trending_up"
    TRENDING_DOWN = "trending_down"
    SIDEWAYS = "sideways"
    HIGH_VOLATILITY = "high_volatility"
    LOW_VOLATILITY = "low_volatility"
    BREAKOUT = "breakout"
    CONSOLIDATION = "consolidation"


class VolatilityLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
    VERY_LOW = "very_low"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    VERY_HIGH = "very_high"


class MarketAnalyzer:
    """
    –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å, –æ–±—ä–µ–º—ã –∏ –¥—Ä—É–≥–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    """
    
    def __init__(self):
        self.analysis_cache = {}
        self.last_update = {}
        self.cache_duration = 60  # —Å–µ–∫—É–Ω–¥
        
        # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤
        self.trend_threshold = 0.02  # 2% –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        self.volatility_thresholds = {
            VolatilityLevel.VERY_LOW: 0.01,
            VolatilityLevel.LOW: 0.02,
            VolatilityLevel.MEDIUM: 0.04,
            VolatilityLevel.HIGH: 0.08,
            VolatilityLevel.VERY_HIGH: 0.15
        }
        
        logger.info("üîç Market Analyzer initialized")
    
    def analyze_market(self, symbol: str, timeframe: str = "5") -> Dict:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_key = f"{symbol}_{timeframe}"
            if self._is_cached(cache_key):
                logger.debug(f"Using cached market analysis for {symbol}")
                return self.analysis_cache[cache_key]
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            from backend.integrations.bybit_client import bybit_client
            if bybit_client is None:
                logger.warning("Bybit client not available, using mock analysis")
                return self._generate_mock_analysis()
            
            df = bybit_client.get_kline(symbol, timeframe, limit=200)
            if df is None or df.empty or len(df) < 50:
                logger.warning(f"Insufficient data for {symbol}, using mock analysis")
                return self._generate_mock_analysis()
            
            # –ü—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
            analysis = self._perform_analysis(df)
            analysis["symbol"] = symbol
            analysis["timeframe"] = timeframe
            analysis["timestamp"] = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            self.analysis_cache[cache_key] = analysis
            self.last_update[cache_key] = datetime.now()
            
            logger.info(f"‚úÖ Market analysis completed for {symbol}: {analysis['regime']}")
            return analysis
            
        except Exception as e:
            logger.error(f"‚ùå Error analyzing market for {symbol}: {e}")
            return self._generate_mock_analysis()
    
    def _perform_analysis(self, df: pd.DataFrame) -> Dict:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        close = df['close']
        high = df['high']
        low = df['low']
        volume = df['volume']
        
        # 1. –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞
        trend_analysis = self._analyze_trend(close)
        
        # 2. –ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
        volatility_analysis = self._analyze_volatility(high, low, close)
        
        # 3. –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
        volume_analysis = self._analyze_volume(volume, close)
        
        # 4. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞
        market_regime = self._determine_market_regime(trend_analysis, volatility_analysis)
        
        # 5. –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
        support_resistance = self._analyze_support_resistance(high, low, close)
        
        # 6. –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
        trend_strength = self._calculate_trend_strength(close)
        
        return {
            "regime": market_regime.value,
            "trend": trend_analysis,
            "volatility": volatility_analysis,
            "volume": volume_analysis,
            "support_resistance": support_resistance,
            "trend_strength": trend_strength,
            "market_score": self._calculate_market_score(trend_analysis, volatility_analysis, volume_analysis),
            "trading_recommendation": self._get_trading_recommendation(market_regime, trend_analysis, volatility_analysis)
        }
    
    def _analyze_trend(self, close: pd.Series) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–∞"""
        try:
            # –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
            sma_20 = close.rolling(20).mean()
            sma_50 = close.rolling(50).mean()
            sma_100 = close.rolling(100).mean()
            
            current_price = close.iloc[-1]
            sma_20_val = sma_20.iloc[-1]
            sma_50_val = sma_50.iloc[-1]
            sma_100_val = sma_100.iloc[-1]
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
            if current_price > sma_20_val > sma_50_val > sma_100_val:
                direction = "up"
                strength = "strong"
            elif current_price < sma_20_val < sma_50_val < sma_100_val:
                direction = "down"
                strength = "strong"
            elif current_price > sma_20_val > sma_50_val:
                direction = "up"
                strength = "medium"
            elif current_price < sma_20_val < sma_50_val:
                direction = "down"
                strength = "medium"
            elif current_price > sma_20_val:
                direction = "up"
                strength = "weak"
            elif current_price < sma_20_val:
                direction = "down"
                strength = "weak"
            else:
                direction = "sideways"
                strength = "none"
            
            # –†–∞—Å—á–µ—Ç —É–≥–ª–∞ —Ç—Ä–µ–Ω–¥–∞
            if len(sma_20) >= 10:
                recent_sma = sma_20.iloc[-10:]
                trend_angle = np.polyfit(range(len(recent_sma)), recent_sma, 1)[0]
                trend_angle_pct = (trend_angle / current_price) * 100
            else:
                trend_angle_pct = 0
            
            return {
                "direction": direction,
                "strength": strength,
                "angle": trend_angle_pct,
                "sma_20": sma_20_val,
                "sma_50": sma_50_val,
                "sma_100": sma_100_val,
                "current_price": current_price
            }
            
        except Exception as e:
            logger.error(f"Error in trend analysis: {e}")
            return {"direction": "sideways", "strength": "none", "angle": 0}
    
    def _analyze_volatility(self, high: pd.Series, low: pd.Series, close: pd.Series) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # ATR (Average True Range)
            atr = self._calculate_atr(high, low, close, 14)
            current_atr = atr.iloc[-1] if len(atr) > 0 else 0
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            volatility_pct = (current_atr / close.iloc[-1]) * 100
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            volatility_level = VolatilityLevel.MEDIUM
            for level, threshold in self.volatility_thresholds.items():
                if volatility_pct <= threshold:
                    volatility_level = level
                    break
            
            # –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏)
            returns = close.pct_change().dropna()
            historical_vol = returns.std() * np.sqrt(len(returns))
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
            vol_percentile = (volatility_pct / (historical_vol * 100)) if historical_vol > 0 else 1
            
            return {
                "level": volatility_level.value,
                "atr": current_atr,
                "percentage": volatility_pct,
                "historical": historical_vol * 100,
                "percentile": vol_percentile,
                "is_high": volatility_pct > 0.04,  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å > 4%
                "is_increasing": self._is_volatility_increasing(atr)
            }
            
        except Exception as e:
            logger.error(f"Error in volatility analysis: {e}")
            return {"level": "medium", "percentage": 2.0, "is_high": False}
    
    def _analyze_volume(self, volume: pd.Series, close: pd.Series) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤"""
        try:
            # –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
            avg_volume_20 = volume.rolling(20).mean()
            avg_volume_50 = volume.rolling(50).mean()
            
            current_volume = volume.iloc[-1]
            avg_20 = avg_volume_20.iloc[-1]
            avg_50 = avg_volume_50.iloc[-1]
            
            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –æ–±—ä–µ–º
            volume_ratio_20 = current_volume / avg_20 if avg_20 > 0 else 1
            volume_ratio_50 = current_volume / avg_50 if avg_50 > 0 else 1
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –æ–±—ä–µ–º–∞
            if volume_ratio_20 > 2.0:
                volume_level = "very_high"
            elif volume_ratio_20 > 1.5:
                volume_level = "high"
            elif volume_ratio_20 > 0.8:
                volume_level = "normal"
            elif volume_ratio_20 > 0.5:
                volume_level = "low"
            else:
                volume_level = "very_low"
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–∞ —Å —Ü–µ–Ω–æ–π (OBV —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
            price_change = close.pct_change()
            volume_price_correlation = price_change.corr(volume.pct_change())
            
            return {
                "level": volume_level,
                "current": current_volume,
                "avg_20": avg_20,
                "avg_50": avg_50,
                "ratio_20": volume_ratio_20,
                "ratio_50": volume_ratio_50,
                "price_correlation": volume_price_correlation if not pd.isna(volume_price_correlation) else 0,
                "is_high": volume_ratio_20 > 1.5,
                "is_increasing": self._is_volume_increasing(volume)
            }
            
        except Exception as e:
            logger.error(f"Error in volume analysis: {e}")
            return {"level": "normal", "ratio_20": 1.0, "is_high": False}
    
    def _determine_market_regime(self, trend_analysis: Dict, volatility_analysis: Dict) -> MarketRegime:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä—ã–Ω–∫–∞"""
        trend_direction = trend_analysis.get("direction", "sideways")
        trend_strength = trend_analysis.get("strength", "none")
        volatility_level = volatility_analysis.get("level", "medium")
        is_high_vol = volatility_analysis.get("is_high", False)
        
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        if is_high_vol:
            if trend_direction in ["up", "down"] and trend_strength in ["strong", "medium"]:
                return MarketRegime.BREAKOUT
            else:
                return MarketRegime.HIGH_VOLATILITY
        
        if trend_direction == "up" and trend_strength in ["strong", "medium"]:
            return MarketRegime.TRENDING_UP
        elif trend_direction == "down" and trend_strength in ["strong", "medium"]:
            return MarketRegime.TRENDING_DOWN
        elif volatility_level in ["very_low", "low"]:
            return MarketRegime.CONSOLIDATION
        else:
            return MarketRegime.SIDEWAYS
    
    def _analyze_support_resistance(self, high: pd.Series, low: pd.Series, close: pd.Series) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è"""
        try:
            current_price = close.iloc[-1]
            
            # –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ —É—Ä–æ–≤–Ω–µ–π
            recent_highs = high.rolling(10).max().dropna()
            recent_lows = low.rolling(10).min().dropna()
            
            # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏
            resistance_levels = recent_highs[recent_highs > current_price].tail(3).tolist()
            support_levels = recent_lows[recent_lows < current_price].tail(3).tolist()
            
            # –ë–ª–∏–∂–∞–π—à–∏–µ —É—Ä–æ–≤–Ω–∏
            nearest_resistance = min(resistance_levels) if resistance_levels else current_price * 1.05
            nearest_support = max(support_levels) if support_levels else current_price * 0.95
            
            return {
                "nearest_resistance": nearest_resistance,
                "nearest_support": nearest_support,
                "resistance_distance": ((nearest_resistance - current_price) / current_price) * 100,
                "support_distance": ((current_price - nearest_support) / current_price) * 100,
                "all_resistance": resistance_levels,
                "all_support": support_levels
            }
            
        except Exception as e:
            logger.error(f"Error in support/resistance analysis: {e}")
            current_price = close.iloc[-1] if len(close) > 0 else 100
            return {
                "nearest_resistance": current_price * 1.05,
                "nearest_support": current_price * 0.95,
                "resistance_distance": 5.0,
                "support_distance": 5.0
            }
    
    def _calculate_trend_strength(self, close: pd.Series) -> float:
        """–†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞ (0-100)"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ADX-–ø–æ–¥–æ–±–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            if len(close) < 20:
                return 50.0
            
            # –†–∞—Å—á–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
            high_diff = close.diff()
            low_diff = -close.diff()
            
            plus_dm = high_diff.where(high_diff > low_diff, 0)
            minus_dm = low_diff.where(low_diff > high_diff, 0)
            
            # –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
            plus_di = plus_dm.rolling(14).mean()
            minus_di = minus_dm.rolling(14).mean()
            
            # –†–∞—Å—á–µ—Ç —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞
            dx = abs(plus_di - minus_di) / (plus_di + minus_di) * 100
            strength = dx.rolling(14).mean().iloc[-1]
            
            return min(max(strength, 0), 100) if not pd.isna(strength) else 50.0
            
        except Exception as e:
            logger.error(f"Error calculating trend strength: {e}")
            return 50.0
    
    def _calculate_market_score(self, trend_analysis: Dict, volatility_analysis: Dict, volume_analysis: Dict) -> float:
        """–†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å—á–µ—Ç–∞ (0-100)"""
        try:
            score = 50.0  # –ë–∞–∑–æ–≤—ã–π —Å—á–µ—Ç
            
            # –ë–æ–Ω—É—Å—ã –∑–∞ —Ç—Ä–µ–Ω–¥
            if trend_analysis.get("strength") == "strong":
                score += 20
            elif trend_analysis.get("strength") == "medium":
                score += 10
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            if volatility_analysis.get("level") in ["very_high", "high"]:
                score -= 10  # –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - —Ä–∏—Å–∫
            elif volatility_analysis.get("level") in ["very_low", "low"]:
                score += 5   # –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å - —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
            
            # –ë–æ–Ω—É—Å—ã –∑–∞ –æ–±—ä–µ–º
            if volume_analysis.get("is_high"):
                score += 10  # –í—ã—Å–æ–∫–∏–π –æ–±—ä–µ–º - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            elif volume_analysis.get("level") == "very_low":
                score -= 5   # –ù–∏–∑–∫–∏–π –æ–±—ä–µ–º - —Å–ª–∞–±–æ—Å—Ç—å
            
            return min(max(score, 0), 100)
            
        except Exception as e:
            logger.error(f"Error calculating market score: {e}")
            return 50.0
    
    def _get_trading_recommendation(self, regime: MarketRegime, trend_analysis: Dict, volatility_analysis: Dict) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = {
            "strategy": "neutral",
            "risk_level": "medium",
            "position_size_multiplier": 1.0,
            "preferred_timeframes": ["5m", "15m"],
            "avoid_trading": False,
            "notes": []
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º–∞–º
        if regime == MarketRegime.TRENDING_UP:
            recommendations.update({
                "strategy": "trend_following",
                "risk_level": "low",
                "position_size_multiplier": 1.2,
                "preferred_timeframes": ["15m", "30m"],
                "notes": ["–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ª–æ–Ω–≥–æ–≤", "–°–ª–µ–¥—É–π—Ç–µ —Ç—Ä–µ–Ω–¥—É"]
            })
        elif regime == MarketRegime.TRENDING_DOWN:
            recommendations.update({
                "strategy": "trend_following",
                "risk_level": "low",
                "position_size_multiplier": 1.2,
                "preferred_timeframes": ["15m", "30m"],
                "notes": ["–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è —à–æ—Ä—Ç–æ–≤", "–°–ª–µ–¥—É–π—Ç–µ —Ç—Ä–µ–Ω–¥—É"]
            })
        elif regime == MarketRegime.HIGH_VOLATILITY:
            recommendations.update({
                "strategy": "scalping",
                "risk_level": "high",
                "position_size_multiplier": 0.7,
                "preferred_timeframes": ["1m", "5m"],
                "notes": ["–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å", "–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π"]
            })
        elif regime == MarketRegime.CONSOLIDATION:
            recommendations.update({
                "strategy": "range_trading",
                "risk_level": "medium",
                "position_size_multiplier": 0.9,
                "preferred_timeframes": ["5m", "15m"],
                "notes": ["–¢–æ—Ä–≥–æ–≤–ª—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ", "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ"]
            })
        elif regime == MarketRegime.BREAKOUT:
            recommendations.update({
                "strategy": "breakout",
                "risk_level": "medium",
                "position_size_multiplier": 1.1,
                "preferred_timeframes": ["5m", "15m"],
                "notes": ["–í–æ–∑–º–æ–∂–µ–Ω –ø—Ä–æ–±–æ–π", "–ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –±—ã—Å—Ç—Ä—ã–º –¥–≤–∏–∂–µ–Ω–∏—è–º"]
            })
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        if volatility_analysis.get("is_high"):
            recommendations["risk_level"] = "high"
            recommendations["position_size_multiplier"] *= 0.8
            recommendations["notes"].append("–°–Ω–∏–∂–µ–Ω —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–π –∏–∑-–∑–∞ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏")
        
        return recommendations
    
    def _calculate_atr(self, high: pd.Series, low: pd.Series, close: pd.Series, period: int = 14) -> pd.Series:
        """–†–∞—Å—á–µ—Ç ATR"""
        high_low = high - low
        high_close = np.abs(high - close.shift())
        low_close = np.abs(low - close.shift())
        true_range = pd.concat([high_low, high_close, low_close], axis=1).max(axis=1)
        return true_range.rolling(window=period).mean()
    
    def _is_volatility_increasing(self, atr: pd.Series) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏"""
        if len(atr) < 5:
            return False
        return atr.iloc[-1] > atr.iloc[-5]
    
    def _is_volume_increasing(self, volume: pd.Series) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ—Å—Ç–∞ –æ–±—ä–µ–º–∞"""
        if len(volume) < 5:
            return False
        recent_avg = volume.iloc[-5:].mean()
        older_avg = volume.iloc[-10:-5].mean()
        return recent_avg > older_avg
    
    def _is_cached(self, cache_key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞"""
        if cache_key not in self.analysis_cache or cache_key not in self.last_update:
            return False
        
        time_diff = (datetime.now() - self.last_update[cache_key]).seconds
        return time_diff < self.cache_duration
    
    def _generate_mock_analysis(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        import random
        
        regimes = list(MarketRegime)
        selected_regime = random.choice(regimes)
        
        return {
            "regime": selected_regime.value,
            "trend": {
                "direction": random.choice(["up", "down", "sideways"]),
                "strength": random.choice(["strong", "medium", "weak", "none"]),
                "angle": random.uniform(-2, 2)
            },
            "volatility": {
                "level": random.choice([v.value for v in VolatilityLevel]),
                "percentage": random.uniform(1, 8),
                "is_high": random.choice([True, False])
            },
            "volume": {
                "level": random.choice(["very_low", "low", "normal", "high", "very_high"]),
                "ratio_20": random.uniform(0.5, 2.5),
                "is_high": random.choice([True, False])
            },
            "support_resistance": {
                "resistance_distance": random.uniform(1, 10),
                "support_distance": random.uniform(1, 10)
            },
            "trend_strength": random.uniform(20, 80),
            "market_score": random.uniform(30, 80),
            "trading_recommendation": {
                "strategy": random.choice(["trend_following", "range_trading", "scalping", "breakout"]),
                "risk_level": random.choice(["low", "medium", "high"]),
                "position_size_multiplier": random.uniform(0.7, 1.3),
                "notes": ["Mock analysis data"]
            },
            "symbol": "MOCK",
            "timeframe": "5m",
            "timestamp": datetime.now().isoformat()
        }
    
    def get_market_conditions_summary(self, symbol: str, timeframe: str = "5") -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        analysis = self.analyze_market(symbol, timeframe)
        
        regime = analysis.get("regime", "unknown")
        trend = analysis.get("trend", {})
        volatility = analysis.get("volatility", {})
        score = analysis.get("market_score", 50)
        
        trend_dir = trend.get("direction", "sideways")
        trend_str = trend.get("strength", "none")
        vol_level = volatility.get("level", "medium")
        
        return f"{regime.upper()} | –¢—Ä–µ–Ω–¥: {trend_dir} ({trend_str}) | –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {vol_level} | –°—á–µ—Ç: {score:.0f}/100" 
"""
Strategy Manager - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—ã–±–æ—Ä–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∂–∏–º–æ–≤
"""

import asyncio
import logging
from typing import Dict, List, Any, Optional
from datetime import datetime

from .trading_mode import TradingMode, ModeConfig, get_mode_config, TRADING_MODE_CONFIGS
from .signal_processor import SignalProcessor
from .enhanced_signal_processor import EnhancedSignalProcessor
from .market_analyzer import MarketAnalyzer
from .enhanced_risk_manager import EnhancedRiskManager
from ..utils.config import settings


logger = logging.getLogger(__name__)


class StrategyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    def __init__(self, signal_processor: SignalProcessor):
        self.signal_processor = signal_processor
        self.enhanced_signal_processor = EnhancedSignalProcessor()
        self.market_analyzer = MarketAnalyzer()
        self.enhanced_risk_manager = EnhancedRiskManager()
        
        self.current_mode = TradingMode.CONSERVATIVE  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        self.mode_configs = TRADING_MODE_CONFIGS
        self.mode_switch_time = datetime.now()
        self._active_indicators = {}
        
        # –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        self.use_enhanced_features = True
        
        logger.info(f"üéØ StrategyManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∂–∏–º–æ–º: {self.current_mode.value}")
        logger.info(f"üîß –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {'–í–ö–õ–Æ–ß–ï–ù–´' if self.use_enhanced_features else '–û–¢–ö–õ–Æ–ß–ï–ù–´'}")
    
    async def switch_mode(self, new_mode: TradingMode) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        try:
            old_mode = self.current_mode
            self.current_mode = new_mode
            self.mode_switch_time = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
            config = self.get_current_config()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ signal_processor
            await self._update_indicators(config)
            
            logger.info(f"–¢–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω: {old_mode.value} ‚Üí {new_mode.value}")
            
            return {
                "success": True,
                "old_mode": old_mode.value,
                "new_mode": new_mode.value,
                "switch_time": self.mode_switch_time.isoformat(),
                "config": self._config_to_dict(config)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def get_current_mode(self) -> TradingMode:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ä–µ–∂–∏–º"""
        return self.current_mode
    
    def get_current_config(self) -> ModeConfig:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞"""
        return get_mode_config(self.current_mode)
    
    def get_mode_parameters(self, mode: Optional[TradingMode] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∂–∏–º–∞"""
        target_mode = mode or self.current_mode
        config = get_mode_config(target_mode)
        
        return {
            "mode": target_mode.value,
            "name": config.name,
            "description": config.description,
            "risk_level": config.risk_level,
            "strategy_type": config.strategy_type,
            "timeframes": config.timeframes,
            "leverage_range": {
                "min": config.leverage_range[0],
                "max": config.leverage_range[1]
            },
            "tp_range": {
                "min": config.tp_range[0],
                "max": config.tp_range[1]
            },
            "sl_range": {
                "min": config.sl_range[0],
                "max": config.sl_range[1]
            },
            "trading_pairs": config.trading_pairs,
            "indicators": config.indicators,
            "is_current": target_mode == self.current_mode
        }
    
    def get_available_pairs(self, mode: Optional[TradingMode] = None) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞"""
        target_mode = mode or self.current_mode
        config = get_mode_config(target_mode)
        return config.trading_pairs
    
    def get_leverage_for_mode(self, mode: Optional[TradingMode] = None) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –ø–ª–µ—á–æ –¥–ª—è —Ä–µ–∂–∏–º–∞"""
        target_mode = mode or self.current_mode
        config = get_mode_config(target_mode)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        min_lev, max_lev = config.leverage_range
        return (min_lev + max_lev) / 2
    
    def get_tp_sl_for_mode(self, mode: Optional[TradingMode] = None) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ TP/SL –¥–ª—è —Ä–µ–∂–∏–º–∞"""
        target_mode = mode or self.current_mode
        config = get_mode_config(target_mode)
        
        return {
            "take_profit": (config.tp_range[0] + config.tp_range[1]) / 2,
            "stop_loss": (config.sl_range[0] + config.sl_range[1]) / 2
        }
    
    async def get_signals_for_mode(self, symbol: str, mode: Optional[TradingMode] = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∏ —Å–∏–º–≤–æ–ª–∞"""
        target_mode = mode or self.current_mode
        config = get_mode_config(target_mode)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—É–±–∏—Ä–∞–µ–º "/")
        normalized_symbol = symbol.replace("/", "")
        normalized_pairs = [pair.replace("/", "") for pair in config.trading_pairs]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª –≤ –¥–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
        if normalized_symbol not in normalized_pairs:
            return {
                "error": f"–°–∏–º–≤–æ–ª {symbol} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ {config.name}",
                "supported_pairs": config.trading_pairs
            }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –æ—Ç signal_processor —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–∂–∏–º–∞
            timeframe = config.timeframes[0] if config.timeframes else "5m"
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π SignalProcessor
            timeframe_map = {
                "1m": "1",
                "5m": "5", 
                "15m": "15",
                "30m": "30",
                "1h": "60",
                "4h": "240",
                "1d": "D"
            }
            
            api_timeframe = timeframe_map.get(timeframe, "5")
            
            logger.info(f"üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {symbol} –≤ —Ä–µ–∂–∏–º–µ {config.name}")
            logger.info(f"üìä –¢–∞–π–º—Ñ—Ä–µ–π–º —Ä–µ–∂–∏–º–∞: {timeframe} ‚Üí API: {api_timeframe}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            base_signals = self.signal_processor.get_signals(normalized_symbol, api_timeframe)
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                "signals": base_signals,
                "trading_mode": target_mode.value,
                "mode_name": config.name,
                "risk_level": config.risk_level,
                "strategy_type": config.strategy_type,
                "recommended_leverage": self.get_leverage_for_mode(target_mode),
                "recommended_tp_sl": self.get_tp_sl_for_mode(target_mode),
                "symbol": symbol,
                "timeframe": timeframe,
                "api_timeframe": api_timeframe,
                "timestamp": datetime.now().isoformat()
            }
            
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
            if self.use_enhanced_features:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                    enhanced_signals = self.enhanced_signal_processor.get_enhanced_signals(
                        normalized_symbol, api_timeframe
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result.update({
                        "enhanced_signals": enhanced_signals,
                        "market_analysis": enhanced_signals.get("market_analysis", {}),
                        "signal_strength": enhanced_signals.get("signal_strength", 0.0),
                        "confidence": enhanced_signals.get("confidence", "low"),
                        "final_signal": enhanced_signals.get("final_signal", {}),
                        "should_trade": self.enhanced_signal_processor.should_trade_enhanced(enhanced_signals),
                        "signal_explanation": self.enhanced_signal_processor.get_signal_explanation(enhanced_signals)
                    })
                    
                    logger.info(f"‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {symbol}")
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Error getting enhanced signals: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏
            
            logger.info(f"‚úÖ Generated signals: {len(base_signals)} indicators for {symbol} on {timeframe}")
            
            return result
            
        except Exception as e:
            logger.error(f"Error getting signals for {symbol} in mode {target_mode.value}: {e}")
            return {
                "error": str(e),
                "symbol": symbol,
                "mode": target_mode.value
            }
    
    async def get_enhanced_position_info(self, symbol: str, signals: Dict[str, Any], 
                                       current_price: float, account_balance: float = 1000.0) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–∑–∏—Ü–∏–∏"""
        try:
            if not self.use_enhanced_features:
                return {"error": "Enhanced features are disabled"}
            
            # –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
            position_info = await self.enhanced_risk_manager.calculate_enhanced_position_size(
                symbol, signals, current_price, account_balance
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞–º
            market_analysis = position_info.get("market_analysis", {})
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
            trailing_recommendations = self._get_trailing_stop_recommendations(market_analysis)
            
            position_info.update({
                "trailing_stop_recommendations": trailing_recommendations,
                "enhanced_features": True
            })
            
            return position_info
            
        except Exception as e:
            logger.error(f"Error getting enhanced position info: {e}")
            return {"error": str(e)}
    
    def _get_trailing_stop_recommendations(self, market_analysis: Dict) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞–º"""
        try:
            if not settings.trailing_stop_enabled:
                return {}
            regime = market_analysis.get("regime", "sideways")
            volatility = market_analysis.get("volatility", {})
            vol_level = volatility.get("level", "medium")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É —Å—Ç–æ–ø–∞
            if regime in ["trending_up", "trending_down"]:
                recommended_type = "trailing"
                distance_multiplier = 1.0
            elif regime == "high_volatility":
                recommended_type = "atr_based"
                distance_multiplier = 1.5
            elif vol_level in ["very_low", "low"]:
                recommended_type = "percentage"
                distance_multiplier = 0.8
            else:
                recommended_type = "trailing"
                distance_multiplier = 1.0
            
            # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è
            base_distance = 0.02  # 2%
            recommended_distance = base_distance * distance_multiplier
            
            return {
                "recommended_type": recommended_type,
                "recommended_distance": recommended_distance,
                "distance_multiplier": distance_multiplier,
                "reasoning": f"Based on {regime} market regime and {vol_level} volatility",
                "market_regime": regime,
                "volatility_level": vol_level
            }
            
        except Exception as e:
            logger.error(f"Error getting trailing stop recommendations: {e}")
            return {
                "recommended_type": "trailing",
                "recommended_distance": 0.02,
                "reasoning": "Default recommendations due to error"
            }
    
    def get_market_summary(self, symbol: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π"""
        try:
            if not self.use_enhanced_features:
                return "–£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
            
            return self.market_analyzer.get_market_conditions_summary(symbol)
            
        except Exception as e:
            logger.error(f"Error getting market summary: {e}")
            return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω–æ–π —Å–≤–æ–¥–∫–∏"
    
    def get_mode_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∂–∏–º–∞–º"""
        base_stats = {
            "current_mode": self.current_mode.value,
            "mode_switch_time": self.mode_switch_time.isoformat(),
            "available_modes": len(self.mode_configs),
            "total_trading_pairs": sum(len(config.trading_pairs) for config in self.mode_configs.values()),
            "enhanced_features_enabled": self.use_enhanced_features,
            "modes_info": {
                mode.value: {
                    "name": config.name,
                    "pairs_count": len(config.trading_pairs),
                    "indicators_count": len(config.indicators),
                    "risk_level": config.risk_level
                }
                for mode, config in self.mode_configs.items()
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º
        if self.use_enhanced_features:
            try:
                risk_summary = self.enhanced_risk_manager.get_risk_summary()
                base_stats["enhanced_risk_stats"] = risk_summary
            except Exception as e:
                logger.warning(f"Could not get enhanced risk stats: {e}")
        
        return base_stats
    
    def toggle_enhanced_features(self, enabled: bool) -> Dict[str, Any]:
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        old_state = self.use_enhanced_features
        self.use_enhanced_features = enabled
        
        logger.info(f"üîß –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {'–í–ö–õ–Æ–ß–ï–ù–´' if enabled else '–û–¢–ö–õ–Æ–ß–ï–ù–´'}")
        
        return {
            "success": True,
            "old_state": old_state,
            "new_state": enabled,
            "timestamp": datetime.now().isoformat()
        }
    
    async def _update_indicators(self, config: ModeConfig):
        """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –≤ signal_processor —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –≤ SignalProcessor
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"Updating indicators for mode {config.name}")
            logger.info(f"Indicators: {list(config.indicators.keys())}")
            
            self._active_indicators = config.indicators
            
        except Exception as e:
            logger.error(f"Error updating indicators: {e}")
    
    def _config_to_dict(self, config: ModeConfig) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ModeConfig –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API"""
        return {
            "name": config.name,
            "description": config.description,
            "timeframes": config.timeframes,
            "indicators": config.indicators,
            "leverage_range": config.leverage_range,
            "tp_range": config.tp_range,
            "sl_range": config.sl_range,
            "trading_pairs": config.trading_pairs,
            "risk_level": config.risk_level,
            "strategy_type": config.strategy_type
        }
    
    async def get_enhanced_signals_async(self, symbol: str, timeframe: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        """
        try:
            if not self.use_enhanced_features:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                base_signals = self.signal_processor.get_signals(symbol, timeframe)
                return {
                    "signals": base_signals,
                    "signal_strength": "medium",
                    "confidence": "medium",
                    "market_regime": "unknown",
                    "explanation": "Enhanced features disabled"
                }
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            base_signals = self.signal_processor.get_signals(symbol, timeframe)
            
            # –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
            enhanced_signals = self.enhanced_signal_processor.get_enhanced_signals(symbol, timeframe)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—ã–Ω–æ–∫
            market_analysis = self.market_analyzer.analyze_market(symbol, timeframe)
            
            return {
                "signals": enhanced_signals.get("signals", base_signals),
                "signal_strength": enhanced_signals.get("signal_strength", "medium"),
                "confidence": enhanced_signals.get("confidence", "medium"),
                "market_regime": market_analysis.get("regime", "unknown"),
                "explanation": enhanced_signals.get("explanation", "Enhanced signals processed")
            }
            
        except Exception as e:
            logger.error(f"Error getting enhanced signals for {symbol}: {e}")
            # Fallback –∫ –±–∞–∑–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º
            base_signals = self.signal_processor.get_signals(symbol, timeframe)
            return {
                "signals": base_signals,
                "signal_strength": "unknown",
                "confidence": "low",
                "market_regime": "unknown",
                "explanation": f"Error: {str(e)}"
            } 
#!/usr/bin/env python3
"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö: https://dev.to/ctrlaltvictoria/backend-error-handling-practical-tips-from-a-startup-cto-h6
"""

import logging
import traceback
from typing import Dict, Any, Optional
from enum import Enum

logger = logging.getLogger(__name__)

class ErrorType(Enum):
    """–¢–∏–ø—ã –æ—à–∏–±–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    API_ERROR = "api_error"
    VALIDATION_ERROR = "validation_error"
    DATABASE_ERROR = "database_error"
    NETWORK_ERROR = "network_error"
    CONVERSION_ERROR = "conversion_error"
    AUTHENTICATION_ERROR = "auth_error"
    RATE_LIMIT_ERROR = "rate_limit_error"
    UNKNOWN_ERROR = "unknown_error"

class TradingBotError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    def __init__(self, message: str, error_type: ErrorType = ErrorType.UNKNOWN_ERROR, details: Dict[str, Any] = None):
        super().__init__(message)
        self.message = message
        self.error_type = error_type
        self.details = details or {}
        self.timestamp = None

class APIError(TradingBotError):
    """–û—à–∏–±–∫–∏ API"""
    def __init__(self, message: str, api_response: Dict = None, status_code: int = None):
        super().__init__(message, ErrorType.API_ERROR)
        self.details.update({
            'api_response': api_response,
            'status_code': status_code
        })

class ValidationError(TradingBotError):
    """–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    def __init__(self, message: str, field: str = None, value: Any = None):
        super().__init__(message, ErrorType.VALIDATION_ERROR)
        self.details.update({
            'field': field,
            'value': value
        })

class ConversionError(TradingBotError):
    """–û—à–∏–±–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    def __init__(self, message: str, original_value: Any = None, target_type: str = None):
        super().__init__(message, ErrorType.CONVERSION_ERROR)
        self.details.update({
            'original_value': original_value,
            'target_type': target_type
        })

class NetworkError(TradingBotError):
    """–û—à–∏–±–∫–∏ —Å–µ—Ç–∏"""
    def __init__(self, message: str, url: str = None, timeout: float = None):
        super().__init__(message, ErrorType.NETWORK_ERROR)
        self.details.update({
            'url': url,
            'timeout': timeout
        })

class ErrorHandler:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    
    @staticmethod
    def safe_float_conversion(value: Any, default: float = 0.0, field_name: str = "unknown") -> float:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ float —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        try:
            if value is None or value == '':
                logger.debug(f"üîÑ {field_name}: –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º default={default}")
                return default
            
            result = float(value)
            logger.debug(f"‚úÖ {field_name}: {value} ‚Üí {result}")
            return result
            
        except (ValueError, TypeError) as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {field_name}: '{value}' ‚Üí float. –ò—Å–ø–æ–ª—å–∑—É–µ–º default={default}")
            raise ConversionError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å '{value}' –≤ float –¥–ª—è –ø–æ–ª—è '{field_name}'",
                original_value=value,
                target_type="float"
            )
    
    @staticmethod
    def safe_int_conversion(value: Any, default: int = 0, field_name: str = "unknown") -> int:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ int"""
        try:
            if value is None or value == '':
                return default
            return int(float(value))  # –ß–µ—Ä–µ–∑ float –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ "123.0"
        except (ValueError, TypeError):
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {field_name}: '{value}' ‚Üí int. –ò—Å–ø–æ–ª—å–∑—É–µ–º default={default}")
            raise ConversionError(
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å '{value}' –≤ int –¥–ª—è –ø–æ–ª—è '{field_name}'",
                original_value=value,
                target_type="int"
            )
    
    @staticmethod
    def handle_api_response(response: Dict, operation: str = "API call") -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ API —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ tuple –æ—Ç–≤–µ—Ç–æ–≤
            if isinstance(response, tuple):
                response = response[0]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞
            ret_code = response.get('retCode', -1)
            if ret_code != 0:
                error_msg = response.get('retMsg', 'Unknown API error')
                logger.error(f"‚ùå {operation} failed: {error_msg} (Code: {ret_code})")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –ø–æ –∫–æ–¥—É
                if ret_code == 401:
                    error_type = ErrorType.AUTHENTICATION_ERROR
                elif ret_code == 10001:
                    error_type = ErrorType.VALIDATION_ERROR
                elif ret_code in [10002, 10003]:
                    error_type = ErrorType.RATE_LIMIT_ERROR
                else:
                    error_type = ErrorType.API_ERROR
                
                raise APIError(
                    f"{operation} failed: {error_msg}",
                    api_response=response,
                    status_code=ret_code
                )
            
            logger.debug(f"‚úÖ {operation} successful")
            return response
            
        except APIError:
            raise  # –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞—à–∏ –æ—à–∏–±–∫–∏
        except Exception as e:
            logger.error(f"‚ùå Unexpected error in {operation}: {e}")
            raise TradingBotError(f"Unexpected error in {operation}: {str(e)}")
    
    @staticmethod
    def log_error(error: Exception, context: Dict[str, Any] = None):
        """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        context = context or {}
        
        if isinstance(error, TradingBotError):
            logger.error(f"üö® {error.error_type.value.upper()}: {error.message}")
            if error.details:
                logger.error(f"üìã Details: {error.details}")
        else:
            logger.error(f"üí• UNEXPECTED ERROR: {str(error)}")
            logger.error(f"üìã Context: {context}")
            logger.error(f"üìç Traceback: {traceback.format_exc()}")
    
    @staticmethod
    def create_error_response(error: Exception, include_details: bool = False) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ"""
        if isinstance(error, TradingBotError):
            response = {
                'success': False,
                'error': error.message,
                'error_type': error.error_type.value
            }
            
            if include_details and error.details:
                response['details'] = error.details
                
            return response
        else:
            return {
                'success': False,
                'error': 'Internal server error',
                'error_type': ErrorType.UNKNOWN_ERROR.value
            }

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def handle_errors(operation_name: str = "Operation"):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ –º–µ—Ç–æ–¥–∞—Ö"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except TradingBotError as e:
                ErrorHandler.log_error(e, {'operation': operation_name, 'args': args, 'kwargs': kwargs})
                return ErrorHandler.create_error_response(e)
            except Exception as e:
                ErrorHandler.log_error(e, {'operation': operation_name, 'args': args, 'kwargs': kwargs})
                return ErrorHandler.create_error_response(e)
        return wrapper
    return decorator

# Async –≤–µ—Ä—Å–∏—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
def handle_errors_async(operation_name: str = "Async Operation"):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ async –º–µ—Ç–æ–¥–∞—Ö"""
    def decorator(func):
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except TradingBotError as e:
                ErrorHandler.log_error(e, {'operation': operation_name, 'args': args, 'kwargs': kwargs})
                return ErrorHandler.create_error_response(e)
            except Exception as e:
                ErrorHandler.log_error(e, {'operation': operation_name, 'args': args, 'kwargs': kwargs})
                return ErrorHandler.create_error_response(e)
        return wrapper
    return decorator 
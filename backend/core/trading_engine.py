"""
Trading Engine - Main trading logic for Bybit Trading Bot
Orchestrates signal processing, risk management, and order execution
"""

import asyncio
import logging
from typing import Dict, List, Optional, Any
from datetime import datetime
import pandas as pd
import math
from decimal import Decimal, ROUND_DOWN, ROUND_HALF_UP
import requests

from .signal_processor import SignalProcessor
from .risk_manager import RiskManager
from .strategy_manager import StrategyManager
from .trading_mode import TradingMode, get_mode_config
from ..integrations.bybit_client import BybitClient
from ..utils.config import settings, get_risk_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("backend.core.trading_engine")
clean_logger = logging.getLogger("backend.core.trading_engine.clean")

class TradingEngine:
    """
    Main trading engine that coordinates all trading activities
    """
    
    def __init__(self, bybit_client: Optional[BybitClient] = None, signal_processor: Optional[SignalProcessor] = None, risk_manager: Optional[RiskManager] = None):
        self.signal_processor = signal_processor or SignalProcessor()
        self.risk_manager = risk_manager or RiskManager()
        self.strategy_manager = StrategyManager(self.signal_processor)
        self.bybit_client = bybit_client
        
        # Trading state
        self.is_running = False
        self.start_time = None
        # –¢–µ–ø–µ—Ä—å –∫–ª—é—á ‚Äî (symbol, side): ("BTCUSDT", "Buy") –∏–ª–∏ ("BTCUSDT", "Sell")
        self.active_positions = {}
        self.trading_pairs = settings.trading_pairs
        
        # Performance tracking
        self.total_trades = 0
        self.winning_trades = 0
        self.total_pnl = 0.0
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –ª–æ—Ç–∞ –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
        self.LOT_PRECISION = {
            "BTCUSDT": 3,
            "ETHUSDT": 3,
            "SOLUSDT": 2,
            "DOGEUSDT": 0,
            "XRPUSDT": 0,
            "BNBUSDT": 2,
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        
        # –¢–∞–±–ª–∏—Ü–∞ —à–∞–≥–∞ –ª–æ—Ç–∞ (lot size) –¥–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
        self.LOT_SIZE = {
            "BTCUSDT": 0.001,
            "ETHUSDT": 0.001,
            "SOLUSDT": 0.01,
            "DOGEUSDT": 1,
            "XRPUSDT": 1,
            "BNBUSDT": 0.01,
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        
    async def initialize(self):
        """Initialize the trading engine"""
        try:
            logger.info("üîß Initializing Trading Engine...")
            
            # Initialize Bybit client
            self.bybit_client = BybitClient(
                api_key=settings.bybit_api_key,
                api_secret=settings.bybit_api_secret,
                testnet=settings.bybit_testnet,
                demo=settings.bybit_demo
            )
            
            success = await self.bybit_client.initialize()
            if not success:
                raise Exception("Failed to initialize Bybit client")
            
            # Initialize risk manager
            await self.risk_manager.initialize()
            
            logger.info("‚úÖ Trading Engine initialized successfully")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error initializing Trading Engine: {e}")
            return False
    
    async def start(self):
        """Start the trading engine"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è Trading engine is already running")
            return
        
        self.is_running = True
        self.start_time = datetime.now()
        logger.info("üöÄ Trading engine started")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._main_trading_loop())
    
    def stop(self):
        """Stop the trading engine"""
        logger.info("üõë Stopping trading engine...")
        self.is_running = False
        self.start_time = None
    
    async def _main_trading_loop(self):
        """Main trading loop that processes signals and executes trades"""
        current_mode = self.strategy_manager.get_current_mode()
        mode_config = self.strategy_manager.get_mode_parameters(current_mode)
        timeframe = mode_config.get('timeframes', ['5m'])[0] if mode_config and 'timeframes' in mode_config and mode_config['timeframes'] else "5m"
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏–∑ —Ä–µ–∂–∏–º–∞, –∞ –Ω–µ –∏–∑ settings
        trading_pairs = mode_config.get('trading_pairs', self.trading_pairs) if mode_config else self.trading_pairs
        
        logger.info(f"üìä Trading loop started - Mode: {current_mode.value}, Timeframe: {timeframe}")
        logger.info(f"üìä Trading pairs from mode config: {trading_pairs}")
        logger.info(f"üìä Settings trading pairs (fallback): {self.trading_pairs}")
        
        while self.is_running:
            try:
                # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
                logger.info("üîß [LOOP] –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π...")
                await self.sync_positions_with_exchange()
                
                # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã
                logger.info(f"üîÑ [LOOP] Current trading pairs: {trading_pairs}")
                for symbol in trading_pairs:
                    bybit_symbol = symbol.replace("/", "")
                    await self._process_symbol(bybit_symbol, timeframe)

                # --- [–ù–û–í–û–ï] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–æ–≤ ---
                # –°–æ–±–∏—Ä–∞–µ–º market_data –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç–æ–ø–æ–≤
                if hasattr(self.risk_manager, 'update_trailing_stops'):
                    trailing_symbols = set()
                    if hasattr(self.risk_manager, 'trailing_stops'):
                        trailing_symbols = set(stop.symbol for stop in getattr(self.risk_manager, 'trailing_stops', {}).values() if stop.is_active)
                    # –ü–æ–ª—É—á–∞–µ–º close –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
                    trailing_market_data = {}
                    for symbol in trailing_symbols:
                        try:
                            klines = self.bybit_client.get_kline(symbol, timeframe, limit=1)
                            if klines is not None and len(klines) > 0:
                                trailing_market_data[symbol] = klines['close'].iloc[-1]
                        except Exception as e:
                            logger.warning(f"[TrailingSL] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}: {e}")
                    if trailing_market_data:
                        await self.risk_manager.update_trailing_stops(trailing_market_data)
                # --- [–ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê] ---

                # --- [–ù–û–í–û–ï] –ì–∞—Ä–∞–Ω—Ç–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π ---
                if hasattr(self, 'active_positions') and hasattr(self.risk_manager, 'trailing_stops'):
                    for (symbol, side) in self.active_positions.keys():
                        stop_key = f"{symbol}_{side}"
                        if stop_key not in self.risk_manager.trailing_stops or not self.risk_manager.trailing_stops[stop_key].is_active:
                            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–¥–µ–ª–∫–∏ –∏–ª–∏ —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                            try:
                                current_price = self.bybit_client.get_current_price(symbol)
                                if current_price:
                                    trailing_stop = self.risk_manager.create_trailing_stop(
                                        symbol=symbol,
                                        side=side,
                                        entry_price=current_price,
                                        stop_type=getattr(self.risk_manager, 'StopLossType', None).TRAILING if hasattr(self.risk_manager, 'StopLossType') else None
                                    )
                                    from backend.core.enhanced_risk_manager import stop_logger
                                    stop_logger.info(f"[CREATE][main_loop] Trailing stop auto-created for {symbol} {side}: entry={current_price:.4f}")
                            except Exception as e:
                                logger.warning(f"[TrailingSL][main_loop] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–æ–ø –¥–ª—è {symbol} {side}: {e}")

                await asyncio.sleep(30)
            except Exception as e:
                logger.error(f"‚ùå Error in trading loop iteration: {e}")
                await asyncio.sleep(60)
    
    async def _process_symbol(self, symbol: str, timeframe: str):
        """Process trading signals for a specific symbol"""
        try:
            # Get market data
            market_data = self.bybit_client.get_kline(
                symbol=symbol,
                interval=timeframe,
                limit=200
            )
            
            if market_data is None or len(market_data) < 50:
                logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}")
                return
            
            # Process technical signals
            signals = self.signal_processor.get_signals(symbol, timeframe)
            signal_strength = self.signal_processor.get_signal_strength(signals)
            # –ü–æ–ª—É—á–∞–µ–º detailed_signals –¥–ª—è ATR —Å–∏–ª—ã
            if hasattr(self.signal_processor, 'get_detailed_signals'):
                detailed_signals = self.signal_processor.get_detailed_signals(symbol, timeframe)
                atr_info = detailed_signals.get('ATR', {})
                if 'strength' in atr_info:
                    logger.info(f"[ATR] {symbol} {timeframe}: {atr_info.get('value')} ({atr_info.get('strength')})")
                    clean_logger.info(f"[ATR] {symbol} {timeframe}: {atr_info.get('value')} ({atr_info.get('strength')})")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –ª–æ–≥ –¥–ª—è –≤–µ–±–∞
            web_log = self.format_signal_log_for_web(symbol, signals, signal_strength)
            from backend.main import manager
            import asyncio
            if len(manager.active_connections) > 0:
                try:
                    loop = asyncio.get_event_loop()
                    if loop.is_running():
                        asyncio.create_task(manager.broadcast(f'{web_log}'))
                except Exception:
                    pass

            # –°—Ç–∞—Ä—ã–π –ª–æ–≥ –¥–ª—è backend
            logger.info(f"{symbol}: Buy: {signal_strength['BUY']}, Sell: {signal_strength['SELL']}, Hold: {signal_strength['HOLD']}")

            # Check if we should trade
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
            current_mode = self.strategy_manager.get_current_mode()
            
            min_confirmation = 5  # –î–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            
            trading_decision = self.signal_processor.should_trade(
                signals, 
                min_confirmation=min_confirmation
            )
            
            if trading_decision:
                await self._execute_trade(symbol, trading_decision, market_data)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {symbol}: {e}")

    def format_signal_log_for_web(self, symbol: str, signals: dict, signal_strength: dict) -> str:
        """
        –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤–µ–±-–ª–æ–≥–æ–≤: —Å–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –ø–æ—Ç–æ–º –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        buy = []
        sell = []
        hold = []
        for ind, sig in signals.items():
            if sig == "BUY":
                buy.append(ind)
            elif sig == "SELL":
                sell.append(ind)
            else:
                hold.append(ind)
        parts = []
        if buy:
            parts.append(f"Buy: {', '.join(buy)}")
        if sell:
            parts.append(f"Sell: {', '.join(sell)}")
        if hold:
            parts.append(f"Hold: {', '.join(hold)}")
        details = "; ".join(parts)
        summary = f"{symbol}: {signal_strength['BUY']} buy, {signal_strength['SELL']} sell, {signal_strength['HOLD']} hold"
        return f"{details}\n{summary}"
    
    def round_position_to_nearest_100(self, symbol: str, qty: float, current_price: float, leverage: float) -> float:
        """
        –û–∫—Ä—É–≥–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –¥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 100$ ¬± 20$ (80-120$) —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
            qty: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞
            current_price: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            leverage: –ü–ª–µ—á–æ
            
        Returns:
            float: –û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞
        """
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
        position_value = qty * current_price * leverage
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö 100$ —Å –¥–æ–ø—É—Å–∫–æ–º ¬±20$
        target_value = 100
        min_value = 80  # 100 - 20
        max_value = 120  # 100 + 20
        
        if position_value < min_value:
            # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 80$, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 100$
            rounded_value = target_value
        elif position_value > max_value:
            # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 120$, —É–º–µ–Ω—å—à–∞–µ–º –¥–æ 100$
            rounded_value = target_value
        else:
            # –ï—Å–ª–∏ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 80-120$, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
            rounded_value = position_value
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞
        new_qty = rounded_value / (current_price * leverage)
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –±–∏—Ä–∂–∏
        adjusted_qty = self.adjust_qty(symbol, float(new_qty))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 80$
        final_value = adjusted_qty * current_price * leverage
        if final_value < min_value:
            # –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 80$, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö 100$
            min_qty_for_100 = target_value / (current_price * leverage)
            adjusted_qty = self.adjust_qty(symbol, min_qty_for_100)
        
        logger.info(f"üî¢ [round_position_to_nearest_100] {symbol}:")
        logger.info(f"   –ò—Å—Ö–æ–¥–Ω–æ–µ qty: {qty:.6f}")
        logger.info(f"   –ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {position_value:.2f} USDT")
        logger.info(f"   –î–∏–∞–ø–∞–∑–æ–Ω: {min_value}-{max_value} USDT")
        logger.info(f"   –¶–µ–ª–µ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {rounded_value:.2f} USDT")
        logger.info(f"   –ù–æ–≤–æ–µ qty: {adjusted_qty:.6f}")
        logger.info(f"   –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {adjusted_qty * current_price * leverage:.2f} USDT")
        
        return adjusted_qty

    def calc_tp_sl(self, entry_price, side, mode, market_data=None, symbol=None, timeframe=None):
        logger.info(f"[TP/SL] entry_price={entry_price}, side={side}, mode={mode}")
        clean_logger.info(f"[TP/SL] entry_price={entry_price}, side={side}, mode={mode}")
        # –ù–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if mode == "conservative" and market_data is not None:
            try:
                atr_period = 14
                if 'high' in market_data and 'low' in market_data and 'close' in market_data:
                    high = market_data['high']
                    low = market_data['low']
                    close = market_data['close']
                    import numpy as np
                    atr = (pd.concat([
                        high - low,
                        np.abs(high - close.shift()),
                        np.abs(low - close.shift())
                    ], axis=1).max(axis=1)).rolling(window=atr_period).mean().iloc[-1]
                    atr_pct = round(atr / entry_price, 4)
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º ATR –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0.5-5%
                    atr_pct = min(max(atr_pct, 0.005), 0.05)
                    sl_pct = tp_pct = atr_pct
                    # –î–ª—è ATR >= 3% ‚Äî –æ—Å–æ–±—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è SL
                    if atr_pct >= 0.03:
                        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É—à–ª–∞ –≤ TP –Ω–∞ 2%+ ‚Äî SL = entry
                        # –ï—Å–ª–∏ –Ω–∞ 3%+ ‚Äî SL = entry +1%
                        # (—ç—Ç—É –ª–æ–≥–∏–∫—É –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ —Å—Ç—É–ø–µ–Ω—á–∞—Ç–æ–º SL, –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
                        logger.info(f"[TP/SL][ATR_CONS_NEW] ATR={atr:.4f} ({atr_pct*100:.2f}%), SL/TP={sl_pct*100:.2f}% (–¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ–¥—Ç—è–∂–∫–∏ SL —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ StepwiseStopOrder)")
                        clean_logger.info(f"[TP/SL][ATR_CONS_NEW] ATR={atr:.4f} ({atr_pct*100:.2f}%), SL/TP={sl_pct*100:.2f}% (–¥–∏–Ω–∞–º–∏–∫–∞ –ø–æ–¥—Ç—è–∂–∫–∏ SL —Ä–µ–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ StepwiseStopOrder)")
                    else:
                        logger.info(f"[TP/SL][ATR_CONS_NEW] ATR={atr:.4f} ({atr_pct*100:.2f}%), SL/TP={sl_pct*100:.2f}%")
                        clean_logger.info(f"[TP/SL][ATR_CONS_NEW] ATR={atr:.4f} ({atr_pct*100:.2f}%), SL/TP={sl_pct*100:.2f}%")
                    if side.lower() in ['buy', 'long']:
                        stop_loss = entry_price * (1 - sl_pct)
                        take_profit = entry_price * (1 + tp_pct)
                    else:
                        stop_loss = entry_price * (1 + sl_pct)
                        take_profit = entry_price * (1 - tp_pct)
                    logger.info(f"[TP/SL] Calculated: SL={stop_loss:.4f}, TP={take_profit:.4f}")
                    clean_logger.info(f"[TP/SL] Calculated: SL={stop_loss:.4f}, TP={take_profit:.4f}")
                    return round(stop_loss, 4), round(take_profit, 4)
            except Exception as e:
                logger.error(f"[TP/SL][ATR_CONS_NEW] –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ ATR: {e}")
                clean_logger.error(f"[TP/SL][ATR_CONS_NEW] –û—à–∏–±–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ ATR: {e}")
        params = {
            'conservative': {'sl': 0.03, 'tp': 0.05}
        }
        if mode not in params:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏: {mode}")
            clean_logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏: {mode}")
            return None, None
        sl_pct = params[mode]['sl']
        tp_pct = params[mode]['tp']
        if side.lower() in ['buy', 'long']:
            stop_loss = entry_price * (1 - sl_pct)
            take_profit = entry_price * (1 + tp_pct)
        else:
            stop_loss = entry_price * (1 + sl_pct)
            take_profit = entry_price * (1 - tp_pct)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω–æ—Å—Ç—å —Ü–µ–Ω
        if side.lower() in ['buy', 'long']:
            if stop_loss >= entry_price:
                logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SL –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {stop_loss} >= {entry_price}")
                clean_logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SL –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {stop_loss} >= {entry_price}")
                return None, None
            if take_profit <= entry_price:
                logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TP –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {take_profit} <= {entry_price}")
                clean_logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TP –¥–ª—è –ø–æ–∫—É–ø–∫–∏: {take_profit} <= {entry_price}")
                return None, None
        else:
            if stop_loss <= entry_price:
                logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SL –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {stop_loss} <= {entry_price}")
                clean_logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SL –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {stop_loss} <= {entry_price}")
                return None, None
            if take_profit >= entry_price:
                logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TP –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {take_profit} >= {entry_price}")
                clean_logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π TP –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: {take_profit} >= {entry_price}")
                return None, None
        logger.info(f"[TP/SL] Calculated: SL={stop_loss:.4f}, TP={take_profit:.4f}")
        clean_logger.info(f"[TP/SL] Calculated: SL={stop_loss:.4f}, TP={take_profit:.4f}")
        return round(stop_loss, 4), round(take_profit, 4)
    
    def round_qty(self, symbol, qty):
        precision = self.LOT_PRECISION.get(symbol, 3)
        if precision == 0:
            return int(qty)
        return round(qty, precision)

    def adjust_qty(self, symbol, qty):
        import math
        from decimal import Decimal, ROUND_DOWN, ROUND_HALF_UP
        import requests
        
        qty = abs(qty)
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏
        try:
            base_url = self.get_api_base_url() if hasattr(self, 'bybit_client') and self.bybit_client else "https://api-testnet.bybit.com"
            api_url = f"{base_url}/v5/market/instruments-info"
            params = {"category": "linear", "symbol": symbol}
            response = requests.get(api_url, params=params, timeout=5)
            if response.status_code == 200:
                data = response.json()
                if data.get('retCode') == 0 and data.get('result', {}).get('list'):
                    instrument = data['result']['list'][0]
                    lot_size_filter = instrument.get('lotSizeFilter', {})
                    
                    min_order_qty = float(lot_size_filter.get('minOrderQty', '0.1'))
                    qty_step = float(lot_size_filter.get('qtyStep', '0.1'))
                    
                    logger.info(f"[adjust_qty] –ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏: minOrderQty={min_order_qty}, qtyStep={qty_step}")
                    clean_logger.info(f"[adjust_qty] –ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏: minOrderQty={min_order_qty}, qtyStep={qty_step}")
                else:
                    # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º
                    min_order_qty = 0.1
                    qty_step = 0.1
                    logger.warning(f"[adjust_qty] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    clean_logger.warning(f"[adjust_qty] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            else:
                # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º
                min_order_qty = 0.1
                qty_step = 0.1
                logger.warning(f"[adjust_qty] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∏—Ä–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                clean_logger.warning(f"[adjust_qty] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∏—Ä–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        except Exception as e:
            # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            min_order_qty = 0.1
            qty_step = 0.1
            logger.warning(f"[adjust_qty] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            clean_logger.warning(f"[adjust_qty] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Ç–æ—á–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        qty_decimal = Decimal(str(qty))
        qty_step_decimal = Decimal(str(qty_step))
        min_order_qty_decimal = Decimal(str(min_order_qty))
        
        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ qtyStep
        qty_adjusted = (qty_decimal / qty_step_decimal).quantize(Decimal('1'), rounding=ROUND_HALF_UP) * qty_step_decimal
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ minOrderQty
        if qty_adjusted < min_order_qty_decimal:
            qty_adjusted = min_order_qty_decimal
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ float
        qty_result = float(qty_adjusted)
        
        # –î–ª—è —Ü–µ–ª—ã—Ö –ª–æ—Ç–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º int
        if qty_step >= 1:
            qty_result = int(qty_result)
        
        logger.info(f"üî¢ [adjust_qty] {symbol}: {qty:.6f} ‚Üí {qty_result} (qtyStep={qty_step}, minOrderQty={min_order_qty})")
        clean_logger.info(f"üî¢ [adjust_qty] {symbol}: {qty:.6f} ‚Üí {qty_result} (qtyStep={qty_step}, minOrderQty={min_order_qty})")
        return qty_result

    def format_qty_for_bybit(self, symbol: str, qty: float, price: float = None) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç qty –¥–ª—è Bybit: –∫—Ä–∞—Ç–µ–Ω qtyStep, –Ω–µ –º–µ–Ω—å—à–µ minOrderQty, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ LOT_PRECISION, —É–±–∏—Ä–∞–µ—Ç –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏/—Ç–æ—á–∫—É, –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞.
        
        –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è: qty –æ–∫—Ä—É–≥–ª—è–µ—Ç—Å—è –¥–æ –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∫—Ä–∞—Ç–Ω–æ—Å—Ç—å qtyStep.
        """
        from decimal import Decimal, ROUND_DOWN, ROUND_HALF_UP
        import requests
        
        qty_orig = qty
        qty = Decimal(str(qty))
        logger.info(f"[format_qty_for_bybit] symbol={symbol}, qty_in={qty_orig}, price={price}")
        clean_logger.info(f"[format_qty_for_bybit] symbol={symbol}, qty_in={qty_orig}, price={price}")
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏
        try:
            base_url = self.get_api_base_url() if hasattr(self, 'bybit_client') and self.bybit_client else "https://api-testnet.bybit.com"
            api_url = f"{base_url}/v5/market/instruments-info"
            params = {"category": "linear", "symbol": symbol}
            response = requests.get(api_url, params=params, timeout=5)
            if response.status_code == 200:
                data = response.json()
                if data.get('retCode') == 0 and data.get('result', {}).get('list'):
                    instrument = data['result']['list'][0]
                    lot_size_filter = instrument.get('lotSizeFilter', {})
                    
                    min_order_qty = Decimal(str(lot_size_filter.get('minOrderQty', '0.1')))
                    qty_step = Decimal(str(lot_size_filter.get('qtyStep', '0.1')))
                    min_notional_value = Decimal(str(lot_size_filter.get('minNotionalValue', '5')))
                    
                    logger.info(f"[format_qty_for_bybit] –ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏: minOrderQty={min_order_qty}, qtyStep={qty_step}, minNotionalValue={min_notional_value}")
                    clean_logger.info(f"[format_qty_for_bybit] –ü–æ–ª—É—á–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏: minOrderQty={min_order_qty}, qtyStep={qty_step}, minNotionalValue={min_notional_value}")
                else:
                    # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º
                    min_order_qty = Decimal('0.1')
                    qty_step = Decimal('0.1')
                    min_notional_value = Decimal('5')
                    logger.warning(f"[format_qty_for_bybit] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    clean_logger.warning(f"[format_qty_for_bybit] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            else:
                # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º
                min_order_qty = Decimal('0.1')
                qty_step = Decimal('0.1')
                min_notional_value = Decimal('5')
                logger.warning(f"[format_qty_for_bybit] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∏—Ä–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                clean_logger.warning(f"[format_qty_for_bybit] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∏—Ä–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        except Exception as e:
            # Fallback –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏—è–º
            min_order_qty = Decimal('0.1')
            qty_step = Decimal('0.1')
            min_notional_value = Decimal('5')
            logger.warning(f"[format_qty_for_bybit] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            clean_logger.warning(f"[format_qty_for_bybit] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        
        # qty –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ minOrderQty
        if qty < min_order_qty:
            logger.info(f"[format_qty_for_bybit] qty < minOrderQty: {qty} < {min_order_qty}, set to minOrderQty")
            clean_logger.info(f"[format_qty_for_bybit] qty < minOrderQty: {qty} < {min_order_qty}, set to minOrderQty")
            qty = min_order_qty
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: qty –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∫—Ä–∞—Ç–µ–Ω qtyStep
        if qty_step > 0:
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –±–ª–∏–∂–∞–π—à–µ–≥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ qtyStep
            qty = (qty / qty_step).quantize(Decimal('1'), rounding=ROUND_HALF_UP) * qty_step
        
        logger.info(f"[format_qty_for_bybit] qty after qtyStep rounding: {qty}")
        clean_logger.info(f"[format_qty_for_bybit] qty after qtyStep rounding: {qty}")
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ—Ä–¥–µ—Ä–∞ (minNotionalValue USDT)
        if price is not None and price > 0:
            price_decimal = Decimal(str(price))
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è minNotionalValue
            min_qty_raw = min_notional_value / price_decimal
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –∫—Ä–∞—Ç–Ω–æ–≥–æ qty_step –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É
            min_qty_for_value = ((min_qty_raw / qty_step).quantize(Decimal('1'), rounding=ROUND_HALF_UP)) * qty_step
            logger.info(f"[format_qty_for_bybit] min_qty for {min_notional_value} USDT: {min_qty_for_value}")
            clean_logger.info(f"[format_qty_for_bybit] min_qty for {min_notional_value} USDT: {min_qty_for_value}")
            if qty < min_qty_for_value:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                qty = min_qty_for_value
                logger.info(f"[format_qty_for_bybit] qty increased to meet {min_notional_value} USDT minimum: {qty}")
                clean_logger.info(f"[format_qty_for_bybit] qty increased to meet {min_notional_value} USDT minimum: {qty}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ qtyStep
        remainder = (qty / qty_step) % 1
        logger.info(f"[format_qty_for_bybit] qty/qtyStep={qty/qty_step}, remainder={remainder}")
        clean_logger.info(f"[format_qty_for_bybit] qty/qtyStep={qty/qty_step}, remainder={remainder}")
        if remainder != 0:
            logger.warning(f"[format_qty_for_bybit] WARNING: qty={qty} –Ω–µ –∫—Ä–∞—Ç–µ–Ω qtyStep={qty_step} (remainder={remainder}) ‚Äî Bybit –Ω–µ –ø—Ä–∏–º–µ—Ç!")
            clean_logger.warning(f"[format_qty_for_bybit] WARNING: qty={qty} –Ω–µ –∫—Ä–∞—Ç–µ–Ω qtyStep={qty_step} (remainder={remainder}) ‚Äî Bybit –Ω–µ –ø—Ä–∏–º–µ—Ç!")
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–∫—Ä—É–≥–ª—è–µ–º
            qty = (qty / qty_step).quantize(Decimal('1'), rounding=ROUND_HALF_UP) * qty_step
            logger.info(f"[format_qty_for_bybit] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω–æ –¥–æ: {qty}")
            clean_logger.info(f"[format_qty_for_bybit] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–∫—Ä—É–≥–ª–µ–Ω–æ –¥–æ: {qty}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–π —Ç–æ—á–∫–∏
        qty_str = f"{qty}"
        if '.' in qty_str:
            qty_str = qty_str.rstrip('0').rstrip('.')
        if qty_str == '':
            qty_str = '0'
        
        logger.info(f"[format_qty_for_bybit] qty_str result: {qty_str}, qty*price={qty*Decimal(str(price or 1)):.5f}")
        clean_logger.info(f"[format_qty_for_bybit] qty_str result: {qty_str}, qty*price={qty*Decimal(str(price or 1)):.5f}")
        return qty_str

    def get_mode(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Å—Ç—Ä–æ–∫–∞)"""
        if hasattr(self.risk_manager, 'mode'):
            return self.risk_manager.mode
        return 'conservative'

    def set_mode(self, mode):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if hasattr(self.risk_manager, 'mode'):
            self.risk_manager.mode = mode
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    async def _execute_trade(self, symbol: str, decision: str, market_data: pd.DataFrame):
        """Execute a trade based on the signal"""
        try:
            await self.sync_positions_with_exchange()
            current_price = market_data['close'].iloc[-1]
            current_mode = self.strategy_manager.get_current_mode()
            mode_config = self.strategy_manager.get_mode_parameters(current_mode)
            side = "Buy" if decision == "BUY" else "Sell"
            if (symbol, side) in self.active_positions:
                logger.warning(f"‚ö†Ô∏è Already have {side} position in {symbol}")
                return
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ 80-120$ –° —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
            target_position_value = 100  # –¶–µ–ª–µ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –≤ USDT (—Å —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ—á–æ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∂–∏–º–∞
            leverage = 10  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10x
            try:
                raw_leverage = None
                if hasattr(mode_config, 'leverage_range') and isinstance(mode_config.leverage_range, tuple):
                    raw_leverage = mode_config.leverage_range
                elif isinstance(mode_config, dict) and 'leverage_range' in mode_config:
                    raw_leverage = mode_config['leverage_range']
                elif isinstance(mode_config, dict) and 'leverage' in mode_config:
                    raw_leverage = mode_config['leverage']
                if raw_leverage is not None:
                    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞
                    if isinstance(raw_leverage, dict):
                        leverage = float(raw_leverage.get('value', 10))
                    elif isinstance(raw_leverage, (list, tuple)):
                        # –ë–µ—Ä—ë–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω
                        leverage = float(raw_leverage[-1])
                    else:
                        leverage = float(raw_leverage)
                    logger.info(f"[_execute_trade] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–µ—á–æ –∏–∑ —Ä–µ–∂–∏–º–∞: {leverage}x (type={type(raw_leverage)})")
                    clean_logger.info(f"[_execute_trade] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–µ—á–æ –∏–∑ —Ä–µ–∂–∏–º–∞: {leverage}x (type={type(raw_leverage)})")
                else:
                    logger.warning(f"[_execute_trade] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–µ—á–æ –∏–∑ mode_config, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {leverage}x")
                    clean_logger.warning(f"[_execute_trade] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–µ—á–æ –∏–∑ mode_config, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {leverage}x")
            except Exception as e:
                logger.warning(f"[_execute_trade] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–µ—á–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {leverage}x")
                clean_logger.warning(f"[_execute_trade] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–µ—á–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {leverage}x")
            
            # –ü–æ–ª—É—á–∞–µ–º minNotionalValue –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
            min_notional_value = 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                base_url = self.get_api_base_url() if hasattr(self, 'bybit_client') and self.bybit_client else "https://api-testnet.bybit.com"
                api_url = f"{base_url}/v5/market/instruments-info"
                params = {"category": "linear", "symbol": symbol}
                response = requests.get(api_url, params=params, timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    if data.get('retCode') == 0 and data.get('result', {}).get('list'):
                        instrument = data['result']['list'][0]
                        lot_size_filter = instrument.get('lotSizeFilter', {})
                        min_notional_value = float(lot_size_filter.get('minNotionalValue', '5'))
                        logger.info(f"[_execute_trade] –ü–æ–ª—É—á–µ–Ω minNotionalValue —Å –±–∏—Ä–∂–∏: {min_notional_value}")
                        clean_logger.info(f"[_execute_trade] –ü–æ–ª—É—á–µ–Ω minNotionalValue —Å –±–∏—Ä–∂–∏: {min_notional_value}")
            except Exception as e:
                logger.warning(f"[_execute_trade] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
                clean_logger.warning(f"[_execute_trade] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º qty –¥–ª—è —Ü–µ–ª–µ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –° —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
            # –¶–µ–ª—å: 1000$ –ø–æ–∑–∏—Ü–∏—è —Å –ø–ª–µ—á–æ–º 10x = 100$ –º–∞—Ä–∂–∏
            # –ù–æ –º—ã —Ö–æ—Ç–∏–º 1000$ –ø–æ–∑–∏—Ü–∏—é, –ø–æ—ç—Ç–æ–º—É —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ leverage
            required_value = max(target_position_value * leverage, min_notional_value)
            qty = required_value / current_price
            
            # –û–∫—Ä—É–≥–ª—è–µ–º qty –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –±–∏—Ä–∂–∏
            qty = self.adjust_qty(symbol, qty)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º (–° —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞)
            calculated_value = qty * current_price
            logger.info(f"üî¢ [_execute_trade] –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {qty:.6f} {symbol} = {calculated_value:.2f} USDT (—Å –ø–ª–µ—á–æ–º {leverage}x)")
            clean_logger.info(f"üî¢ [_execute_trade] –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {qty:.6f} {symbol} = {calculated_value:.2f} USDT (—Å –ø–ª–µ—á–æ–º {leverage}x)")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 800-1200$ (1000$ ¬± 200$)
            min_value = 800
            max_value = 1200
            if calculated_value < min_value or calculated_value > max_value:
                logger.warning(f"‚ö†Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ {calculated_value:.2f} USDT –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {min_value}-{max_value}$. –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                clean_logger.warning(f"‚ö†Ô∏è –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ {calculated_value:.2f} USDT –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {min_value}-{max_value}$. –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                return
            
            order_result = await self.place_order(
                symbol=symbol,
                side=side,
                amount=qty,
                order_type="market",
                price=current_price,
                market_data=market_data,
                mode=current_mode.value,
                timeframe=mode_config.get('timeframes', ['5m'])[0] if mode_config and 'timeframes' in mode_config and mode_config['timeframes'] else "5m"
            )
            if order_result and order_result.get('success') and current_mode.value == "conservative":
                # –°–æ–∑–¥–∞—ë–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø —á–µ—Ä–µ–∑ EnhancedRiskManager —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ä–¥–µ—Ä —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç
                if hasattr(self.risk_manager, 'create_trailing_stop'):
                    trailing_stop = self.risk_manager.create_trailing_stop(
                        symbol=symbol,
                        side=side,
                        entry_price=current_price,
                        stop_type=getattr(self.risk_manager, 'StopLossType', None).TRAILING if hasattr(self.risk_manager, 'StopLossType') else None
                    )
                    try:
                        from backend.core.enhanced_risk_manager import stop_logger
                        stop_logger.info(f"[CREATE][_execute_trade] Trailing stop created for {symbol} {side}: entry={current_price:.4f}")
                    except Exception:
                        pass
        except Exception as e:
            import traceback
            logger.error(f"‚ùå Error executing trade for {symbol}: {e}")
            logger.error(f"‚ùå Full traceback: {traceback.format_exc()}")
    
    def calc_tp_sl_from_mode(self, entry_price: float, side: str, mode_config) -> tuple:
        """Calculate TP/SL based on mode configuration"""
        try:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: mode_config - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, –Ω–µ –æ–±—ä–µ–∫—Ç
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã TP/SL –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            tp_range = mode_config.get('tp_range', {'min': 0.5, 'max': 1.0})
            sl_range = mode_config.get('sl_range', {'min': 0.3, 'max': 0.7})
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            tp_pct = tp_range['min'] / 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π TP –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
            sl_pct = sl_range['min'] / 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π SL –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
            
            if side.lower() in ['buy', 'long']:
                stop_loss = entry_price * (1 - sl_pct)
                take_profit = entry_price * (1 + tp_pct)
            else:
                stop_loss = entry_price * (1 + sl_pct)
                take_profit = entry_price * (1 - tp_pct)
                
            return round(stop_loss, 4), round(take_profit, 4)
            
        except Exception as e:
            logger.error(f"Error calculating TP/SL: {e}")
            return None, None
    
    async def place_order(self, symbol: str, side: str, amount: float, order_type: str = "market", price: float = None, market_data=None, mode=None, timeframe=None) -> Dict:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
        
        Args:
            symbol: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTCUSDT)
            side: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ("buy" –∏–ª–∏ "sell")
            amount: –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
            order_type: –¢–∏–ø –æ—Ä–¥–µ—Ä–∞ ("market" –∏–ª–∏ "limit")
            price: –¶–µ–Ω–∞ –¥–ª—è –ª–∏–º–∏—Ç–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        logger.info(f"üìù –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: {side.upper()} {amount} {symbol} ({order_type})")
        clean_logger.info(f"üìù –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: {side.upper()} {amount} {symbol} ({order_type})")
        
        try:
            if not self.bybit_client:
                return {"success": False, "error": "Bybit client not initialized"}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if side.lower() not in ['buy', 'sell']:
                return {"success": False, "error": f"Invalid side: {side}"}
            
            if amount <= 0:
                return {"success": False, "error": f"Invalid amount: {amount}"}
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞
            logger.info(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞:")
            logger.info(f"   –°–∏–º–≤–æ–ª: {symbol}")
            logger.info(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side.upper()}")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}")
            logger.info(f"   –¢–∏–ø: {order_type}")
            if price:
                logger.info(f"   –¶–µ–Ω–∞: {price}")
            clean_logger.info(f"üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ä–¥–µ—Ä–∞:")
            clean_logger.info(f"   –°–∏–º–≤–æ–ª: {symbol}")
            clean_logger.info(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {side.upper()}")
            clean_logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}")
            clean_logger.info(f"   –¢–∏–ø: {order_type}")
            if price:
                clean_logger.info(f"   –¶–µ–Ω–∞: {price}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ TP/SL –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É–º–º—ã
            current_price = price if price else self.bybit_client.get_current_price(symbol)
            if current_price is None:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}, –æ—Ä–¥–µ—Ä –Ω–µ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω!")
                clean_logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}, –æ—Ä–¥–µ—Ä –Ω–µ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω!")
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—É–º–º—ã –æ—Ä–¥–µ—Ä–∞"}
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ–∂–∏–º–∞ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–ª–µ—á–∞
            if mode is None:
                mode = self.risk_manager.mode if hasattr(self.risk_manager, 'mode') else 'conservative'
            try:
                mode_enum = TradingMode(mode)
            except Exception:
                mode_enum = TradingMode.CONSERVATIVE
            mode_config = get_mode_config(mode_enum)
            leverage = 1
            if hasattr(mode_config, 'leverage_range') and isinstance(mode_config.leverage_range, tuple):
                leverage = float(mode_config.leverage_range[1])
            
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
            min_notional_value = 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            try:
                base_url = self.get_api_base_url() if hasattr(self, 'bybit_client') and self.bybit_client else "https://api-testnet.bybit.com"
                api_url = f"{base_url}/v5/market/instruments-info"
                params = {"category": "linear", "symbol": symbol}
                response = requests.get(api_url, params=params, timeout=5)
                if response.status_code == 200:
                    data = response.json()
                    if data.get('retCode') == 0 and data.get('result', {}).get('list'):
                        instrument = data['result']['list'][0]
                        lot_size_filter = instrument.get('lotSizeFilter', {})
                        min_notional_value = float(lot_size_filter.get('minNotionalValue', '5'))
                        logger.info(f"[place_order] –ü–æ–ª—É—á–µ–Ω minNotionalValue —Å –±–∏—Ä–∂–∏: {min_notional_value}")
                        clean_logger.info(f"[place_order] –ü–æ–ª—É—á–µ–Ω minNotionalValue —Å –±–∏—Ä–∂–∏: {min_notional_value}")
                    else:
                        logger.warning(f"[place_order] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                        clean_logger.warning(f"[place_order] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å –±–∏—Ä–∂–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                else:
                    logger.warning(f"[place_order] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∏—Ä–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    clean_logger.warning(f"[place_order] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∏—Ä–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            except Exception as e:
                logger.warning(f"[place_order] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                clean_logger.warning(f"[place_order] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –æ—Ä–¥–µ—Ä–∞ (Bybit —Ç—Ä–µ–±—É–µ—Ç >= minNotionalValue USDT –Ω–∞ –∑–∞—è–≤–∫—É)
            min_qty = math.ceil(min_notional_value / float(current_price) * 1000) / 1000
            if amount < min_qty:
                logger.info(f"üîÑ [min_qty] Increasing qty for {symbol}: {amount} ‚Üí {min_qty} (to meet minimum order value >= {min_notional_value} USDT)")
                clean_logger.info(f"üîÑ [min_qty] Increasing qty for {symbol}: {amount} ‚Üí {min_qty} (to meet minimum order value >= {min_notional_value} USDT)")
                amount = min_qty
            min_order_value = float(amount) * float(current_price)
            if min_order_value < min_notional_value:
                logger.warning(f"‚ö†Ô∏è –°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ {min_order_value:.2f} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {min_notional_value} USDT (Bybit). –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                clean_logger.warning(f"‚ö†Ô∏è –°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ {min_order_value:.2f} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {min_notional_value} USDT (Bybit). –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                return {"success": False, "error": f"–°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞ {min_order_value:.2f} USDT –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {min_notional_value} USDT (Bybit)"}
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –Ω–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Ä–∞–∑–º–µ—Ä —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –≤ _execute_trade
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –æ—Ä–¥–µ—Ä–∞ –¥–ª—è Bybit
            order_value = float(amount) * float(current_price)
            
            logger.info(f"üìä [place_order] –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {amount:.6f} {symbol} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {order_value:.2f} USDT)")
            clean_logger.info(f"üìä [place_order] –†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞: {amount:.6f} {symbol} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {order_value:.2f} USDT)")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä–∂–∏ (–±–∞–ª–∞–Ω—Å–∞)
            margin_required = float(amount) * float(current_price) / leverage
            balance = self.bybit_client.get_balance()
            if balance is not None and margin_required > float(balance):
                logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Ä–∂–∞ {margin_required:.2f} USDT, –¥–æ—Å—Ç—É–ø–Ω–æ {balance:.2f} USDT. –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                clean_logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Ä–∂–∞ {margin_required:.2f} USDT, –¥–æ—Å—Ç—É–ø–Ω–æ {balance:.2f} USDT. –û—Ä–¥–µ—Ä –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                return {"success": False, "error": f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∞—Ä–∂–∞ {margin_required:.2f} USDT, –¥–æ—Å—Ç—É–ø–Ω–æ {balance:.2f} USDT"}
            stop_loss, take_profit = self.calc_tp_sl(current_price, side, mode, market_data=market_data, symbol=symbol, timeframe=timeframe)
            if stop_loss is None or take_profit is None:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å TP/SL –¥–ª—è {symbol}, –æ—Ä–¥–µ—Ä –Ω–µ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω!")
                clean_logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å TP/SL –¥–ª—è {symbol}, –æ—Ä–¥–µ—Ä –Ω–µ –±—É–¥–µ—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω!")
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å TP/SL"}
            # --- –ù–æ–≤—ã–π –±–ª–æ–∫: –ø–æ–ø—ã—Ç–∫–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º qty –ø—Ä–∏ –æ—à–∏–±–∫–µ 110007 ---
            max_attempts = 3
            attempt = 0
            max_qty = 1000  # –ª–∏–º–∏—Ç –¥–ª—è qty, —á—Ç–æ–±—ã –Ω–µ —É–π—Ç–∏ –≤ –∞–±—Å—É—Ä–¥
            while attempt < max_attempts:
                logger.info(f"üéØ [–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}] Executing {side} order for {amount} {symbol} at {current_price}")
                clean_logger.info(f"üéØ [–ü–æ–ø—ã—Ç–∫–∞ {attempt+1}] Executing {side} order for {amount} {symbol} at {current_price}")
                qty_final = self.adjust_qty(symbol, amount)
                qty_str = self.format_qty_for_bybit(symbol, qty_final, price=current_price)
                logger.info(f"üî¢ [lot_size] –ò—Ç–æ–≥–æ–≤–æ–µ qty –¥–ª—è {symbol}: {qty_str}")
                clean_logger.info(f"üî¢ [lot_size] –ò—Ç–æ–≥–æ–≤–æ–µ qty –¥–ª—è {symbol}: {qty_str}")
                order_kwargs = dict(
                    symbol=symbol,
                    side=side.capitalize(),
                    order_type=order_type.capitalize(),
                    qty=qty_str,  # qty –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω—É–∂–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
                    stop_loss=float(stop_loss) if stop_loss is not None else None,
                    take_profit=float(take_profit) if take_profit is not None else None
                )
                if order_type.lower() == "limit" and price is not None:
                    order_kwargs["price"] = float(price)
                order_kwargs = {k: v for k, v in order_kwargs.items() if v is not None}
                logger.info(f"[place_order] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è bybit_client.place_order: {order_kwargs}")
                clean_logger.info(f"[place_order] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è bybit_client.place_order: {order_kwargs}")
                logger.info(f"[place_order] type(qty_str)={type(qty_str)}, repr(qty_str)={repr(qty_str)}")
                clean_logger.info(f"[place_order] type(qty_str)={type(qty_str)}, repr(qty_str)={repr(qty_str)}")
                logger.info(f"[place_order] –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {order_kwargs}")
                clean_logger.info(f"[place_order] –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {order_kwargs}")
                order_result = await self.bybit_client.place_order(**order_kwargs)
                logger.info(f"[place_order] –û—Ç–≤–µ—Ç bybit_client.place_order: {order_result}")
                clean_logger.info(f"[place_order] –û—Ç–≤–µ—Ç bybit_client.place_order: {order_result}")
                if order_result and order_result.get('retCode') == 0:
                    order_id = order_result.get('result', {}).get('orderId')
                    logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω! ID: {order_id}")
                    clean_logger.info(f"‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω! ID: {order_id}")
                    self.total_trades += 1
                    await self.sync_positions_with_exchange()
                    return {
                        "success": True,
                        "order_id": order_id,
                        "symbol": symbol,
                        "side": side,
                        "amount": amount,
                        "type": order_type,
                        "result": order_result
                    }
                else:
                    error_msg = order_result.get('retMsg', 'Unknown error') if order_result else 'No response'
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {error_msg}")
                    clean_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: {error_msg}")
                    # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 110007 ‚Äî —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º qty –∏ –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑
                    if order_result and ("110007" in str(order_result.get('retMsg', '')) or "ab not enough for new order" in str(order_result.get('retMsg', ''))):
                        new_amount = round(amount * 2, 3)
                        if new_amount > max_qty:
                            logger.error(f"‚ùå [110007] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç qty ({new_amount}), –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
                            clean_logger.error(f"‚ùå [110007] –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç qty ({new_amount}), –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.")
                            return {"success": False, "error": f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç qty ({new_amount}), –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.", "result": order_result}
                        logger.warning(f"üîÑ [110007] –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º qty {amount} ‚Üí {new_amount} –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
                        clean_logger.warning(f"üîÑ [110007] –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º qty {amount} ‚Üí {new_amount} –∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É...")
                        amount = new_amount
                        attempt += 1
                        continue
                    # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                    return {"success": False, "error": error_msg, "result": order_result}
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è qty. –ü–æ—Å–ª–µ–¥–Ω–µ–µ qty: {amount}")
            clean_logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è qty. –ü–æ—Å–ª–µ–¥–Ω–µ–µ qty: {amount}")
            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ä–¥–µ—Ä –ø–æ—Å–ª–µ —É–≤–µ–ª–∏—á–µ–Ω–∏—è qty", "result": None}
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            clean_logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: {e}")
            return {"success": False, "error": str(e)}

    async def get_trading_status(self) -> Dict:
        """Get current trading status"""
        return {
            "is_running": self.is_running,
            "start_time": self.start_time.isoformat() if self.start_time else None,
            "total_trades": self.total_trades,
            "winning_trades": self.winning_trades,
            "win_rate": (self.winning_trades / self.total_trades * 100) if self.total_trades > 0 else 0,
            "total_pnl": self.total_pnl,
            "active_positions": len(self.active_positions),
            "trading_pairs": self.trading_pairs
        }
    
    async def get_active_positions(self) -> Dict:
        """Get active trading positions"""
        return self.active_positions
    
    async def close_position(self, symbol: str, side: str = None) -> bool:
        """Close a specific position. –ï—Å–ª–∏ side –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –∑–∞–∫—Ä—ã—Ç—å –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã"""
        closed = False
        if side:
            key = (symbol, side)
            if key not in self.active_positions:
                logger.warning(f"‚ö†Ô∏è No active {side} position for {symbol}")
                clean_logger.warning(f"‚ö†Ô∏è No active {side} position for {symbol}")
                return False
            try:
                position = self.active_positions[key]
                close_side = "Sell" if position["side"] == "Buy" else "Buy"
                qty_final = self.adjust_qty(symbol, position["size"])
                qty_str = self.format_qty_for_bybit(symbol, qty_final)
                logger.info(f"üî¢ [lot_size] –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} {side}: qty={qty_str}")
                clean_logger.info(f"üî¢ [lot_size] –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} {side}: qty={qty_str}")
                order_kwargs = dict(
                    symbol=symbol,
                    side=close_side,
                    order_type="Market",
                    qty=qty_str
                )
                order_result = await self.bybit_client.place_order(**order_kwargs)
                if order_result and (order_result.get("success") or order_result.get("retCode") == 0):
                    del self.active_positions[key]
                    logger.info(f"‚úÖ Position closed for {symbol} {side}")
                    clean_logger.info(f"‚úÖ Position closed for {symbol} {side}")
                    await self.sync_positions_with_exchange()
                    closed = True
            except Exception as e:
                logger.error(f"‚ùå Error closing position for {symbol} {side}: {e}")
                clean_logger.error(f"‚ùå Error closing position for {symbol} {side}: {e}")
        else:
            # –ó–∞–∫—Ä—ã—Ç—å –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
            for s in ["Buy", "Sell"]:
                key = (symbol, s)
                if key in self.active_positions:
                    try:
                        position = self.active_positions[key]
                        close_side = "Sell" if position["side"] == "Buy" else "Buy"
                        qty_final = self.adjust_qty(symbol, position["size"])
                        qty_str = self.format_qty_for_bybit(symbol, qty_final)
                        logger.info(f"üî¢ [lot_size] –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} {s}: qty={qty_str}")
                        clean_logger.info(f"üî¢ [lot_size] –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏ {symbol} {s}: qty={qty_str}")
                        order_kwargs = dict(
                            symbol=symbol,
                            side=close_side,
                            order_type="Market",
                            qty=qty_str
                        )
                        order_result = await self.bybit_client.place_order(**order_kwargs)
                        if order_result and (order_result.get("success") or order_result.get("retCode") == 0):
                            del self.active_positions[key]
                            logger.info(f"‚úÖ Position closed for {symbol} {s}")
                            clean_logger.info(f"‚úÖ Position closed for {symbol} {s}")
                            closed = True
                    except Exception as e:
                        logger.error(f"‚ùå Error closing position for {symbol} {s}: {e}")
                        clean_logger.error(f"‚ùå Error closing position for {symbol} {s}: {e}")
            if closed:
                await self.sync_positions_with_exchange()
        return closed
    
    async def shutdown(self):
        """Shutdown the trading engine gracefully"""
        logger.info("üîÑ Shutting down trading engine...")
        clean_logger.info("üîÑ Shutting down trading engine...")
        
        # Stop trading
        self.stop()
        
        # Close all positions
        for key in list(self.active_positions.keys()):
            await self.close_position(key[0], key[1])
        
        logger.info("‚úÖ Trading engine shutdown complete")
        clean_logger.info("‚úÖ Trading engine shutdown complete")

    async def sync_positions_with_exchange(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞ –±–∏—Ä–∂–µ"""
        if not self.bybit_client:
            logger.warning("‚ö†Ô∏è Bybit client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            clean_logger.warning("‚ö†Ô∏è Bybit client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞")
            return
        real_positions = self.bybit_client.get_positions() or []
        real_keys = {(p['symbol'], p.get('side', 'Buy')) for p in real_positions if p['size'] > 0}
        # –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –Ω–∞ –±–∏—Ä–∂–µ
        for key in list(self.active_positions.keys()):
            if key not in real_keys:
                del self.active_positions[key]
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–∞ –±–∏—Ä–∂–µ, –∞ –ª–æ–∫–∞–ª—å–Ω–æ –Ω–µ—Ç
        for pos in real_positions:
            key = (pos['symbol'], pos.get('side', 'Buy'))
            if key not in self.active_positions and pos['size'] > 0:
                self.active_positions[key] = pos
                
        # ‚úÖ –ù–û–í–û–ï: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        await self.correct_position_sizes()

    async def correct_position_sizes(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 80-120 USDT"""
        if not self.bybit_client:
            return
            
        try:
            real_positions = self.bybit_client.get_positions() or []
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–π –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º leverage=1
            # —Ç–∞–∫ –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–∏ –Ω–∞ –±–∏—Ä–∂–µ —É–∂–µ –∏–º–µ—é—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–µ –ø–ª–µ—á–æ
            leverage = 1
            
            for position in real_positions:
                symbol = position['symbol']
                current_size = float(position['size'])
                
                if current_size <= 0:
                    continue
                    
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                current_price = self.bybit_client.get_current_price(symbol)
                if not current_price:
                    continue
                    
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –° —É—á–µ—Ç–æ–º –ø–ª–µ—á–∞
                position_value = current_size * current_price * leverage
                side = position.get('side', 'Buy')
                
                logger.info(f"üîç [correct_position_sizes] –ü—Ä–æ–≤–µ—Ä—è–µ–º {symbol}: "
                          f"—Ä–∞–∑–º–µ—Ä={current_size}, —Ü–µ–Ω–∞={current_price}, "
                          f"—Å—Ç–æ–∏–º–æ—Å—Ç—å={position_value:.2f} USDT")
                clean_logger.info(f"üîç [correct_position_sizes] –ü—Ä–æ–≤–µ—Ä—è–µ–º {symbol}: "
                          f"—Ä–∞–∑–º–µ—Ä={current_size}, —Ü–µ–Ω–∞={current_price}, "
                          f"—Å—Ç–æ–∏–º–æ—Å—Ç—å={position_value:.2f} USDT")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ (–¥–∏–∞–ø–∞–∑–æ–Ω 800-1200$ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π ~1000$)
                min_value = 800
                max_value = 1200
                
                if min_value <= position_value <= max_value:
                    logger.info(f"‚úÖ {symbol}: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ ({position_value:.2f} USDT)")
                    clean_logger.info(f"‚úÖ {symbol}: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ –Ω–æ—Ä–º–µ ({position_value:.2f} USDT)")
                    continue
                    
                if position_value < min_value:
                    # –ü–æ–∑–∏—Ü–∏—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 1000 USDT
                    target_value = 1000
                    target_size = target_value / (current_price * leverage)
                    additional_size = target_size - current_size
                    
                    if additional_size > 0:
                        logger.info(f"üìà {symbol}: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å {position_value:.2f} –¥–æ 1000 USDT "
                                  f"(+{additional_size:.6f})")
                        clean_logger.info(f"üìà {symbol}: –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å {position_value:.2f} –¥–æ 1000 USDT "
                                  f"(+{additional_size:.6f})")
                        
                        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–∏—Ä–∂–∏
                        additional_size = self.adjust_qty(symbol, additional_size)
                        
                        # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä
                        result = await self.place_order(
                            symbol=symbol,
                            side=side,
                            amount=additional_size,
                            order_type="market"
                        )
                        
                        if result.get('success'):
                            logger.info(f"‚úÖ {symbol}: –ü–æ–∑–∏—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {additional_size:.6f}")
                            clean_logger.info(f"‚úÖ {symbol}: –ü–æ–∑–∏—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∞ –Ω–∞ {additional_size:.6f}")
                        else:
                            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {result.get('error')}")
                            clean_logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {result.get('error')}")
                            
                elif position_value > max_value:
                    # –ü–æ–∑–∏—Ü–∏—è —Å–ª–∏—à–∫–æ–º –≤–µ–ª–∏–∫–∞ - —É–º–µ–Ω—å—à–∞–µ–º –¥–æ 1000 USDT
                    target_value = 1000
                    target_size = target_value / (current_price * leverage)
                    reduce_size = current_size - target_size
                    
                    if reduce_size > 0:
                        logger.info(f"üìâ {symbol}: –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å {position_value:.2f} –¥–æ 1000 USDT "
                                  f"(-{reduce_size:.6f})")
                        clean_logger.info(f"üìâ {symbol}: –£–º–µ–Ω—å—à–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Å {position_value:.2f} –¥–æ 1000 USDT "
                                  f"(-{reduce_size:.6f})")
                        
                        # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–∏—Ä–∂–∏
                        reduce_size = self.adjust_qty(symbol, reduce_size)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
                        close_side = "Sell" if side == "Buy" else "Buy"
                        
                        # –í—ã—Å—Ç–∞–≤–ª—è–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ —á–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
                        result = await self.place_order(
                            symbol=symbol,
                            side=close_side,
                            amount=reduce_size,
                            order_type="market"
                        )
                        
                        if result.get('success'):
                            logger.info(f"‚úÖ {symbol}: –ü–æ–∑–∏—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ {reduce_size:.6f}")
                            clean_logger.info(f"‚úÖ {symbol}: –ü–æ–∑–∏—Ü–∏—è —É–º–µ–Ω—å—à–µ–Ω–∞ –Ω–∞ {reduce_size:.6f}")
                        else:
                            logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {result.get('error')}")
                            clean_logger.error(f"‚ùå {symbol}: –û—à–∏–±–∫–∞ —É–º–µ–Ω—å—à–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: {result.get('error')}")
                            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–π: {e}")
            clean_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–π: {e}")

    def get_api_base_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞"""
        if hasattr(self.bybit_client, 'demo') and self.bybit_client.demo:
            return "https://api-demo.bybit.com"
        elif hasattr(self.bybit_client, 'testnet') and self.bybit_client.testnet:
            return "https://api-testnet.bybit.com"
        else:
            return "https://api.bybit.com"
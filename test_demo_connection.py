"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ demo –∞–∫–∫–∞—É–Ω—Ç—É Bybit
"""
import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –º–æ–¥—É–ª—è–º
sys.path.insert(0, str(Path(__file__).parent))

from backend.integrations.bybit_client import BybitClient
from backend.utils.config import settings

async def test_demo_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ demo –∞–∫–∫–∞—É–Ω—Ç—É"""
    print("=== –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö DEMO –ê–ö–ö–ê–£–ù–¢–£ BYBIT ===\n")
    
    print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    print(f"  API Key: {settings.bybit_api_key[:10] if settings.bybit_api_key else '–ù–ï –ó–ê–î–ê–ù'}...")
    print(f"  Testnet: {settings.bybit_testnet}")
    print(f"  Demo: {settings.bybit_demo}")
    print()
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å demo –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        client = BybitClient(
            api_key=settings.bybit_api_key,
            api_secret=settings.bybit_api_secret,
            testnet=settings.bybit_testnet,
            demo=settings.bybit_demo,
            ignore_ssl=settings.bybit_ignore_ssl
        )
        
        print("üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞...")
        success = await client.initialize()
        
        if success:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ demo –∞–∫–∫–∞—É–Ω—Ç—É —É—Å–ø–µ—à–Ω–æ!")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞
            print("\n‚è∞ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
            server_time = await client.get_server_time()
            print(f"–í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            print("\nüí∞ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...")
            balance = client.get_wallet_balance()
            if balance:
                print("–ë–∞–ª–∞–Ω—Å demo –∞–∫–∫–∞—É–Ω—Ç–∞:")
                for coin, info in balance.items():
                    if info['total'] > 0:
                        print(f"  {coin}: {info['total']:.2f} (–¥–æ—Å—Ç—É–ø–Ω–æ: {info['available']:.2f})")
            else:
                print("–ë–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
            print("\nüìà –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π...")
            positions = client.get_positions()
            if positions:
                print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
                for pos in positions:
                    print(f"  {pos['symbol']}: {pos['side']} {pos['size']} (PnL: {pos['unrealized_pnl']:.2f})")
            else:
                print("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–µ—Ç")
                
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            print("\nüìä –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            klines = client.get_kline("BTCUSDT", "5", limit=5)
            if klines is not None and not klines.empty:
                print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–≤–µ—á–µ–π: {len(klines)}")
                print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ BTC: ${klines['close'].iloc[-1]:.2f}")
            else:
                print("–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ demo –∞–∫–∫–∞—É–Ω—Ç—É")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_demo_connection()) 